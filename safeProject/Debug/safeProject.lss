
safeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00003dc8  00003e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000318c  00000000  00000000  00003f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dd1  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00007e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00007fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00008164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000c22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000c66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cefc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <main>
      7a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e3       	ldi	r26, 0x30	; 48
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e3       	ldi	r24, 0x30	; 48
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e3       	ldi	r22, 0x30	; 48
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <APP_voidInit>:
 *                             Functions definition                            *
 *******************************************************************************/

/******************************************************/
/********A function to initialize the Application******/
void APP_voidInit(){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     c96:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_init>
	GRN_LED_init();
     c9a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <GRN_LED_init>
	RED_LED_init();
     c9e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <RED_LED_init>
}
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <APP_voidWelcomeScreen>:

/*****************************************************/
/********A function to display the 1st screen*********/
void APP_voidWelcomeScreen(){
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	2e 97       	sbiw	r28, 0x0e	; 14
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61

	/* display "Welcome my user" */
	LCD_clearScreen();
     cbc:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("Welcome my user");
     cc0:	80 e6       	ldi	r24, 0x60	; 96
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e8       	ldi	r25, 0x80	; 128
     ccc:	ab e3       	ldi	r26, 0x3B	; 59
     cce:	b5 e4       	ldi	r27, 0x45	; 69
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
     cd2:	9c 87       	std	Y+12, r25	; 0x0c
     cd4:	ad 87       	std	Y+13, r26	; 0x0d
     cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cda:	7c 85       	ldd	r23, Y+12	; 0x0c
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	55 e4       	ldi	r21, 0x45	; 69
     ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	98 87       	std	Y+8, r25	; 0x08
     cf4:	a9 87       	std	Y+9, r26	; 0x09
     cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <APP_voidWelcomeScreen+0x72>
		__ticks = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <APP_voidWelcomeScreen+0xf0>
	else if (__tmp > 65535)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	3f ef       	ldi	r19, 0xFF	; 255
     d26:	4f e7       	ldi	r20, 0x7F	; 127
     d28:	57 e4       	ldi	r21, 0x47	; 71
     d2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d2e:	18 16       	cp	r1, r24
     d30:	4c f5       	brge	.+82     	; 0xd84 <APP_voidWelcomeScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d32:	6b 85       	ldd	r22, Y+11	; 0x0b
     d34:	7c 85       	ldd	r23, Y+12	; 0x0c
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	0f c0       	rjmp	.+30     	; 0xd7a <APP_voidWelcomeScreen+0xd2>
     d5c:	80 e9       	ldi	r24, 0x90	; 144
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <APP_voidWelcomeScreen+0xc0>
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f7       	brne	.-38     	; 0xd5c <APP_voidWelcomeScreen+0xb4>
     d82:	14 c0       	rjmp	.+40     	; 0xdac <APP_voidWelcomeScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <APP_voidWelcomeScreen+0xfc>
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LONG_DELAY);

	/* Move to the next window ( Main Menu Screen )*/
	APP_voidMainMenuScreen();
     dac:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <APP_voidMainMenuScreen>
}
     db0:	2e 96       	adiw	r28, 0x0e	; 14
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <APP_voidMainMenuScreen>:

/*****************************************************/
/********A function to display the main menu*********/
static void APP_voidMainMenuScreen(){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2f 97       	sbiw	r28, 0x0f	; 15
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61

	/* display : -
	 * "1] open safe"
	 * "2] Change Pass"
	 */
	LCD_clearScreen();
     dd6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("1] open safe");
     dda:	80 e7       	ldi	r24, 0x70	; 112
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_moveCursor(1, 0);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>
	LCD_displayString("2] Change Pass");
     dea:	8d e7       	ldi	r24, 0x7D	; 125
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>

	/* Get the user decision */
	uint8 pressedKey = KEYPAD_getPressedKey();
     df2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <KEYPAD_getPressedKey>
     df6:	8f 87       	std	Y+15, r24	; 0x0f

	/* User choice is to open safe */
	if(pressedKey == 1)
     df8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <APP_voidMainMenuScreen+0x42>
	{
		/* Move to open safe screen*/
		APP_voidOpenSafeScreen();
     dfe:	0e 94 93 07 	call	0xf26	; 0xf26 <APP_voidOpenSafeScreen>
     e02:	88 c0       	rjmp	.+272    	; 0xf14 <APP_voidMainMenuScreen+0x152>
	}

	/* User choice is to change password */
	else if(pressedKey == 2)
     e04:	8f 85       	ldd	r24, Y+15	; 0x0f
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	19 f4       	brne	.+6      	; 0xe10 <APP_voidMainMenuScreen+0x4e>
	{
		/* Move to change password screen */
		APP_voidChangePasswordScreen();
     e0a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <APP_voidChangePasswordScreen>
     e0e:	82 c0       	rjmp	.+260    	; 0xf14 <APP_voidMainMenuScreen+0x152>
	{
		/* display : -
		 * "Wrong Input"
		 * "System reset"
		 */
		LCD_clearScreen();
     e10:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
		LCD_displayString("Wrong Input");
     e14:	8c e8       	ldi	r24, 0x8C	; 140
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
		LCD_moveCursor(1, 0);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>
		LCD_displayString("System reset");
     e24:	88 e9       	ldi	r24, 0x98	; 152
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e8       	ldi	r25, 0x80	; 128
     e30:	ab e3       	ldi	r26, 0x3B	; 59
     e32:	b5 e4       	ldi	r27, 0x45	; 69
     e34:	8b 87       	std	Y+11, r24	; 0x0b
     e36:	9c 87       	std	Y+12, r25	; 0x0c
     e38:	ad 87       	std	Y+13, r26	; 0x0d
     e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	4a e7       	ldi	r20, 0x7A	; 122
     e4a:	55 e4       	ldi	r21, 0x45	; 69
     e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	8f 83       	std	Y+7, r24	; 0x07
     e56:	98 87       	std	Y+8, r25	; 0x08
     e58:	a9 87       	std	Y+9, r26	; 0x09
     e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e70:	88 23       	and	r24, r24
     e72:	2c f4       	brge	.+10     	; 0xe7e <APP_voidMainMenuScreen+0xbc>
		__ticks = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	3f c0       	rjmp	.+126    	; 0xefc <APP_voidMainMenuScreen+0x13a>
	else if (__tmp > 65535)
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	3f ef       	ldi	r19, 0xFF	; 255
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e92:	18 16       	cp	r1, r24
     e94:	4c f5       	brge	.+82     	; 0xee8 <APP_voidMainMenuScreen+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e96:	6b 85       	ldd	r22, Y+11	; 0x0b
     e98:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e2       	ldi	r20, 0x20	; 32
     ea4:	51 e4       	ldi	r21, 0x41	; 65
     ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	0f c0       	rjmp	.+30     	; 0xede <APP_voidMainMenuScreen+0x11c>
     ec0:	80 e9       	ldi	r24, 0x90	; 144
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <APP_voidMainMenuScreen+0x10a>
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	69 f7       	brne	.-38     	; 0xec0 <APP_voidMainMenuScreen+0xfe>
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <APP_voidMainMenuScreen+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <APP_voidMainMenuScreen+0x146>
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LONG_DELAY);

		/* Move to the welcome screen */
		APP_voidWelcomeScreen();
     f10:	0e 94 54 06 	call	0xca8	; 0xca8 <APP_voidWelcomeScreen>
	}
}
     f14:	2f 96       	adiw	r28, 0x0f	; 15
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <APP_voidOpenSafeScreen>:

/******************************************************/
/******A function to make open safe operations*********/
static void APP_voidOpenSafeScreen(){
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	66 97       	sbiw	r28, 0x16	; 22
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
	uint8 userEnteredPassword[4];
	password_State state = WRONG_PASSWORD;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	8a 8b       	std	Y+18, r24	; 0x12
	for(uint8 i =0;i<3 && state ==WRONG_PASSWORD  ;i++)
     f42:	19 8a       	std	Y+17, r1	; 0x11
     f44:	bc c0       	rjmp	.+376    	; 0x10be <APP_voidOpenSafeScreen+0x198>
	{
		/* display enter password */
		LCD_clearScreen();
     f46:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
		LCD_displayString("Enter Password");
     f4a:	85 ea       	ldi	r24, 0xA5	; 165
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
		LCD_moveCursor(1, 0);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>

		/* Get the password */
		for(uint8 j=0;j<4;j++)
     f5a:	18 8a       	std	Y+16, r1	; 0x10
     f5c:	84 c0       	rjmp	.+264    	; 0x1066 <APP_voidOpenSafeScreen+0x140>
		{
			userEnteredPassword[j] = KEYPAD_getPressedKey();
     f5e:	88 89       	ldd	r24, Y+16	; 0x10
     f60:	08 2f       	mov	r16, r24
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <KEYPAD_getPressedKey>
     f68:	28 2f       	mov	r18, r24
     f6a:	ce 01       	movw	r24, r28
     f6c:	43 96       	adiw	r24, 0x13	; 19
     f6e:	fc 01       	movw	r30, r24
     f70:	e0 0f       	add	r30, r16
     f72:	f1 1f       	adc	r31, r17
     f74:	20 83       	st	Z, r18
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	aa e7       	ldi	r26, 0x7A	; 122
     f7c:	b4 e4       	ldi	r27, 0x44	; 68
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
     f80:	9c 87       	std	Y+12, r25	; 0x0c
     f82:	ad 87       	std	Y+13, r26	; 0x0d
     f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4a e7       	ldi	r20, 0x7A	; 122
     f94:	55 e4       	ldi	r21, 0x45	; 69
     f96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	8f 83       	std	Y+7, r24	; 0x07
     fa0:	98 87       	std	Y+8, r25	; 0x08
     fa2:	a9 87       	std	Y+9, r26	; 0x09
     fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e8       	ldi	r20, 0x80	; 128
     fb4:	5f e3       	ldi	r21, 0x3F	; 63
     fb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fba:	88 23       	and	r24, r24
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <APP_voidOpenSafeScreen+0xa2>
		__ticks = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	3f c0       	rjmp	.+126    	; 0x1046 <APP_voidOpenSafeScreen+0x120>
	else if (__tmp > 65535)
     fc8:	6f 81       	ldd	r22, Y+7	; 0x07
     fca:	78 85       	ldd	r23, Y+8	; 0x08
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	4f e7       	ldi	r20, 0x7F	; 127
     fd6:	57 e4       	ldi	r21, 0x47	; 71
     fd8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fdc:	18 16       	cp	r1, r24
     fde:	4c f5       	brge	.+82     	; 0x1032 <APP_voidOpenSafeScreen+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <APP_voidOpenSafeScreen+0x102>
    100a:	80 e9       	ldi	r24, 0x90	; 144
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <APP_voidOpenSafeScreen+0xf0>
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f7       	brne	.-38     	; 0x100a <APP_voidOpenSafeScreen+0xe4>
    1030:	14 c0       	rjmp	.+40     	; 0x105a <APP_voidOpenSafeScreen+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1032:	6f 81       	ldd	r22, Y+7	; 0x07
    1034:	78 85       	ldd	r23, Y+8	; 0x08
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <APP_voidOpenSafeScreen+0x12c>
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(SHORT_DELAY);
			LCD_displayCharacter('*');
    105a:	8a e2       	ldi	r24, 0x2A	; 42
    105c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_displayCharacter>
		LCD_clearScreen();
		LCD_displayString("Enter Password");
		LCD_moveCursor(1, 0);

		/* Get the password */
		for(uint8 j=0;j<4;j++)
    1060:	88 89       	ldd	r24, Y+16	; 0x10
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	88 8b       	std	Y+16, r24	; 0x10
    1066:	88 89       	ldd	r24, Y+16	; 0x10
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f4       	brcc	.+2      	; 0x106e <APP_voidOpenSafeScreen+0x148>
    106c:	78 cf       	rjmp	.-272    	; 0xf5e <APP_voidOpenSafeScreen+0x38>
			userEnteredPassword[j] = KEYPAD_getPressedKey();
			_delay_ms(SHORT_DELAY);
			LCD_displayCharacter('*');
		}

		state = TRUE_PASSWORD;
    106e:	1a 8a       	std	Y+18, r1	; 0x12
		/* Check Password */
		for(uint8 j=0;j<4;j++)
    1070:	1f 86       	std	Y+15, r1	; 0x0f
    1072:	1f c0       	rjmp	.+62     	; 0x10b2 <APP_voidOpenSafeScreen+0x18c>
		{
			if(userEnteredPassword[j] != g_password[j])
    1074:	8f 85       	ldd	r24, Y+15	; 0x0f
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	ce 01       	movw	r24, r28
    107c:	43 96       	adiw	r24, 0x13	; 19
    107e:	fc 01       	movw	r30, r24
    1080:	e2 0f       	add	r30, r18
    1082:	f3 1f       	adc	r31, r19
    1084:	20 81       	ld	r18, Z
    1086:	8f 85       	ldd	r24, Y+15	; 0x0f
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	fc 01       	movw	r30, r24
    108e:	e8 5c       	subi	r30, 0xC8	; 200
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	80 81       	ld	r24, Z
    1094:	28 17       	cp	r18, r24
    1096:	51 f0       	breq	.+20     	; 0x10ac <APP_voidOpenSafeScreen+0x186>
			{
				APP_voidWrongPasswordScreen(3-i);
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	89 89       	ldd	r24, Y+17	; 0x11
    109c:	29 2f       	mov	r18, r25
    109e:	28 1b       	sub	r18, r24
    10a0:	82 2f       	mov	r24, r18
    10a2:	0e 94 8f 0a 	call	0x151e	; 0x151e <APP_voidWrongPasswordScreen>
				state = WRONG_PASSWORD;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	8a 8b       	std	Y+18, r24	; 0x12
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <APP_voidOpenSafeScreen+0x192>
			LCD_displayCharacter('*');
		}

		state = TRUE_PASSWORD;
		/* Check Password */
		for(uint8 j=0;j<4;j++)
    10ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	8f 87       	std	Y+15, r24	; 0x0f
    10b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	f0 f2       	brcs	.-68     	; 0x1074 <APP_voidOpenSafeScreen+0x14e>
/******************************************************/
/******A function to make open safe operations*********/
static void APP_voidOpenSafeScreen(){
	uint8 userEnteredPassword[4];
	password_State state = WRONG_PASSWORD;
	for(uint8 i =0;i<3 && state ==WRONG_PASSWORD  ;i++)
    10b8:	89 89       	ldd	r24, Y+17	; 0x11
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	89 8b       	std	Y+17, r24	; 0x11
    10be:	89 89       	ldd	r24, Y+17	; 0x11
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	20 f4       	brcc	.+8      	; 0x10cc <APP_voidOpenSafeScreen+0x1a6>
    10c4:	8a 89       	ldd	r24, Y+18	; 0x12
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <APP_voidOpenSafeScreen+0x1a6>
    10ca:	3d cf       	rjmp	.-390    	; 0xf46 <APP_voidOpenSafeScreen+0x20>
				break;
			}
		}

	}
	if(state == TRUE_PASSWORD){
    10cc:	8a 89       	ldd	r24, Y+18	; 0x12
    10ce:	88 23       	and	r24, r24
    10d0:	29 f4       	brne	.+10     	; 0x10dc <APP_voidOpenSafeScreen+0x1b6>
		APP_voidTruePasswordScreen();
    10d2:	0e 94 bd 0b 	call	0x177a	; 0x177a <APP_voidTruePasswordScreen>
		APP_voidMainMenuScreen();
    10d6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <APP_voidMainMenuScreen>
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <APP_voidOpenSafeScreen+0x1be>
	}
	else{
		APP_voidThiefAlert();
    10dc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <APP_voidThiefAlert>
		APP_voidMainMenuScreen();
    10e0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <APP_voidMainMenuScreen>
	}
}
    10e4:	66 96       	adiw	r28, 0x16	; 22
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <APP_voidChangePasswordScreen>:

/************************************************************/
/******A function to make change password operations*********/
static void APP_voidChangePasswordScreen(){
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	66 97       	sbiw	r28, 0x16	; 22
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
	uint8 userEnteredPassword[4];
	password_State state = WRONG_PASSWORD;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8a 8b       	std	Y+18, r24	; 0x12
	for(uint8 i =0;i<3 && state ==WRONG_PASSWORD ;i++)
    1116:	19 8a       	std	Y+17, r1	; 0x11
    1118:	bc c0       	rjmp	.+376    	; 0x1292 <APP_voidChangePasswordScreen+0x198>
	{
		/* display enter password */
		LCD_clearScreen();
    111a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
		LCD_displayString("Enter old Pass");
    111e:	84 eb       	ldi	r24, 0xB4	; 180
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>

		/* Get the password */
		for(uint8 j=0;j<4;j++)
    112e:	18 8a       	std	Y+16, r1	; 0x10
    1130:	84 c0       	rjmp	.+264    	; 0x123a <APP_voidChangePasswordScreen+0x140>
		{
			userEnteredPassword[j] = KEYPAD_getPressedKey();
    1132:	88 89       	ldd	r24, Y+16	; 0x10
    1134:	08 2f       	mov	r16, r24
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <KEYPAD_getPressedKey>
    113c:	28 2f       	mov	r18, r24
    113e:	ce 01       	movw	r24, r28
    1140:	43 96       	adiw	r24, 0x13	; 19
    1142:	fc 01       	movw	r30, r24
    1144:	e0 0f       	add	r30, r16
    1146:	f1 1f       	adc	r31, r17
    1148:	20 83       	st	Z, r18
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	aa e7       	ldi	r26, 0x7A	; 122
    1150:	b4 e4       	ldi	r27, 0x44	; 68
    1152:	8b 87       	std	Y+11, r24	; 0x0b
    1154:	9c 87       	std	Y+12, r25	; 0x0c
    1156:	ad 87       	std	Y+13, r26	; 0x0d
    1158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6b 85       	ldd	r22, Y+11	; 0x0b
    115c:	7c 85       	ldd	r23, Y+12	; 0x0c
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a e7       	ldi	r20, 0x7A	; 122
    1168:	55 e4       	ldi	r21, 0x45	; 69
    116a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8f 83       	std	Y+7, r24	; 0x07
    1174:	98 87       	std	Y+8, r25	; 0x08
    1176:	a9 87       	std	Y+9, r26	; 0x09
    1178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <APP_voidChangePasswordScreen+0xa2>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	3f c0       	rjmp	.+126    	; 0x121a <APP_voidChangePasswordScreen+0x120>
	else if (__tmp > 65535)
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <APP_voidChangePasswordScreen+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <APP_voidChangePasswordScreen+0x102>
    11de:	80 e9       	ldi	r24, 0x90	; 144
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <APP_voidChangePasswordScreen+0xf0>
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <APP_voidChangePasswordScreen+0xe4>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <APP_voidChangePasswordScreen+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6f 81       	ldd	r22, Y+7	; 0x07
    1208:	78 85       	ldd	r23, Y+8	; 0x08
    120a:	89 85       	ldd	r24, Y+9	; 0x09
    120c:	9a 85       	ldd	r25, Y+10	; 0x0a
    120e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9e 83       	std	Y+6, r25	; 0x06
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <APP_voidChangePasswordScreen+0x12c>
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(SHORT_DELAY);
			LCD_displayCharacter('*');
    122e:	8a e2       	ldi	r24, 0x2A	; 42
    1230:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_displayCharacter>
		LCD_clearScreen();
		LCD_displayString("Enter old Pass");
		LCD_moveCursor(1, 0);

		/* Get the password */
		for(uint8 j=0;j<4;j++)
    1234:	88 89       	ldd	r24, Y+16	; 0x10
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	88 8b       	std	Y+16, r24	; 0x10
    123a:	88 89       	ldd	r24, Y+16	; 0x10
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	08 f4       	brcc	.+2      	; 0x1242 <APP_voidChangePasswordScreen+0x148>
    1240:	78 cf       	rjmp	.-272    	; 0x1132 <APP_voidChangePasswordScreen+0x38>
			userEnteredPassword[j] = KEYPAD_getPressedKey();
			_delay_ms(SHORT_DELAY);
			LCD_displayCharacter('*');
		}

		state = TRUE_PASSWORD;
    1242:	1a 8a       	std	Y+18, r1	; 0x12
		/* Check Password */
		for(uint8 j=0;j<4;j++)
    1244:	1f 86       	std	Y+15, r1	; 0x0f
    1246:	1f c0       	rjmp	.+62     	; 0x1286 <APP_voidChangePasswordScreen+0x18c>
		{
			if(userEnteredPassword[j] != g_password[j])
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	ce 01       	movw	r24, r28
    1250:	43 96       	adiw	r24, 0x13	; 19
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	20 81       	ld	r18, Z
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	fc 01       	movw	r30, r24
    1262:	e8 5c       	subi	r30, 0xC8	; 200
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	80 81       	ld	r24, Z
    1268:	28 17       	cp	r18, r24
    126a:	51 f0       	breq	.+20     	; 0x1280 <APP_voidChangePasswordScreen+0x186>
			{
				APP_voidWrongPasswordScreen(3-i);
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	89 89       	ldd	r24, Y+17	; 0x11
    1270:	29 2f       	mov	r18, r25
    1272:	28 1b       	sub	r18, r24
    1274:	82 2f       	mov	r24, r18
    1276:	0e 94 8f 0a 	call	0x151e	; 0x151e <APP_voidWrongPasswordScreen>
				state = WRONG_PASSWORD;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	8a 8b       	std	Y+18, r24	; 0x12
    127e:	06 c0       	rjmp	.+12     	; 0x128c <APP_voidChangePasswordScreen+0x192>
			LCD_displayCharacter('*');
		}

		state = TRUE_PASSWORD;
		/* Check Password */
		for(uint8 j=0;j<4;j++)
    1280:	8f 85       	ldd	r24, Y+15	; 0x0f
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	8f 85       	ldd	r24, Y+15	; 0x0f
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	f0 f2       	brcs	.-68     	; 0x1248 <APP_voidChangePasswordScreen+0x14e>
/************************************************************/
/******A function to make change password operations*********/
static void APP_voidChangePasswordScreen(){
	uint8 userEnteredPassword[4];
	password_State state = WRONG_PASSWORD;
	for(uint8 i =0;i<3 && state ==WRONG_PASSWORD ;i++)
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	89 89       	ldd	r24, Y+17	; 0x11
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <APP_voidChangePasswordScreen+0x1a6>
    1298:	8a 89       	ldd	r24, Y+18	; 0x12
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <APP_voidChangePasswordScreen+0x1a6>
    129e:	3d cf       	rjmp	.-390    	; 0x111a <APP_voidChangePasswordScreen+0x20>
				state = WRONG_PASSWORD;
				break;
			}
		}
	}
	if(state == TRUE_PASSWORD){
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	88 23       	and	r24, r24
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <APP_voidChangePasswordScreen+0x1b6>
		APP_voidChangePassword();
    12a6:	0e 94 67 09 	call	0x12ce	; 0x12ce <APP_voidChangePassword>
		APP_voidMainMenuScreen();
    12aa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <APP_voidMainMenuScreen>
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <APP_voidChangePasswordScreen+0x1be>
	}
	else{
		APP_voidThiefAlert();
    12b0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <APP_voidThiefAlert>
		APP_voidMainMenuScreen();
    12b4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <APP_voidMainMenuScreen>
	}
}
    12b8:	66 96       	adiw	r28, 0x16	; 22
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <APP_voidChangePassword>:

/*********************************************************************/
/******A function to get the password from user and change it*********/
static void APP_voidChangePassword(){
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	6d 97       	sbiw	r28, 0x1d	; 29
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61



	/* display enter password */
	LCD_clearScreen();
    12e6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("Enter new Pass");
    12ea:	83 ec       	ldi	r24, 0xC3	; 195
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>

	/* Get the password */
	for(uint8 j=0;j<4;j++)
    12fa:	1d 8e       	std	Y+29, r1	; 0x1d
    12fc:	81 c0       	rjmp	.+258    	; 0x1400 <APP_voidChangePassword+0x132>
	{
		g_password[j] = KEYPAD_getPressedKey();
    12fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1300:	08 2f       	mov	r16, r24
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <KEYPAD_getPressedKey>
    1308:	f8 01       	movw	r30, r16
    130a:	e8 5c       	subi	r30, 0xC8	; 200
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	80 83       	st	Z, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e8       	ldi	r25, 0x80	; 128
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b5 e4       	ldi	r27, 0x45	; 69
    1318:	89 8f       	std	Y+25, r24	; 0x19
    131a:	9a 8f       	std	Y+26, r25	; 0x1a
    131c:	ab 8f       	std	Y+27, r26	; 0x1b
    131e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1320:	69 8d       	ldd	r22, Y+25	; 0x19
    1322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	55 e4       	ldi	r21, 0x45	; 69
    1330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8d 8b       	std	Y+21, r24	; 0x15
    133a:	9e 8b       	std	Y+22, r25	; 0x16
    133c:	af 8b       	std	Y+23, r26	; 0x17
    133e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1340:	6d 89       	ldd	r22, Y+21	; 0x15
    1342:	7e 89       	ldd	r23, Y+22	; 0x16
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	2c f4       	brge	.+10     	; 0x1362 <APP_voidChangePassword+0x94>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	3f c0       	rjmp	.+126    	; 0x13e0 <APP_voidChangePassword+0x112>
	else if (__tmp > 65535)
    1362:	6d 89       	ldd	r22, Y+21	; 0x15
    1364:	7e 89       	ldd	r23, Y+22	; 0x16
    1366:	8f 89       	ldd	r24, Y+23	; 0x17
    1368:	98 8d       	ldd	r25, Y+24	; 0x18
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1376:	18 16       	cp	r1, r24
    1378:	4c f5       	brge	.+82     	; 0x13cc <APP_voidChangePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137a:	69 8d       	ldd	r22, Y+25	; 0x19
    137c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    137e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <APP_voidChangePassword+0xf4>
    13a4:	80 e9       	ldi	r24, 0x90	; 144
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	9a 8b       	std	Y+18, r25	; 0x12
    13aa:	89 8b       	std	Y+17, r24	; 0x11
    13ac:	89 89       	ldd	r24, Y+17	; 0x11
    13ae:	9a 89       	ldd	r25, Y+18	; 0x12
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <APP_voidChangePassword+0xe2>
    13b4:	9a 8b       	std	Y+18, r25	; 0x12
    13b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ba:	9c 89       	ldd	r25, Y+20	; 0x14
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	9c 8b       	std	Y+20, r25	; 0x14
    13c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c2:	8b 89       	ldd	r24, Y+19	; 0x13
    13c4:	9c 89       	ldd	r25, Y+20	; 0x14
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	69 f7       	brne	.-38     	; 0x13a4 <APP_voidChangePassword+0xd6>
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <APP_voidChangePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9c 8b       	std	Y+20, r25	; 0x14
    13de:	8b 8b       	std	Y+19, r24	; 0x13
    13e0:	8b 89       	ldd	r24, Y+19	; 0x13
    13e2:	9c 89       	ldd	r25, Y+20	; 0x14
    13e4:	98 8b       	std	Y+16, r25	; 0x10
    13e6:	8f 87       	std	Y+15, r24	; 0x0f
    13e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ea:	98 89       	ldd	r25, Y+16	; 0x10
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <APP_voidChangePassword+0x11e>
    13f0:	98 8b       	std	Y+16, r25	; 0x10
    13f2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		LCD_displayCharacter('*');
    13f4:	8a e2       	ldi	r24, 0x2A	; 42
    13f6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_displayString("Enter new Pass");
	LCD_moveCursor(1, 0);

	/* Get the password */
	for(uint8 j=0;j<4;j++)
    13fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	08 f4       	brcc	.+2      	; 0x1408 <APP_voidChangePassword+0x13a>
    1406:	7b cf       	rjmp	.-266    	; 0x12fe <APP_voidChangePassword+0x30>

	/* display : -
	 * "Password Updated"
	 * "Successfully"
	 */
	LCD_clearScreen();
    1408:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("Password Updated");
    140c:	82 ed       	ldi	r24, 0xD2	; 210
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>
	LCD_displayString("Successfully!!");
    141c:	83 ee       	ldi	r24, 0xE3	; 227
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	aa e7       	ldi	r26, 0x7A	; 122
    142a:	b4 e4       	ldi	r27, 0x44	; 68
    142c:	8b 87       	std	Y+11, r24	; 0x0b
    142e:	9c 87       	std	Y+12, r25	; 0x0c
    1430:	ad 87       	std	Y+13, r26	; 0x0d
    1432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6b 85       	ldd	r22, Y+11	; 0x0b
    1436:	7c 85       	ldd	r23, Y+12	; 0x0c
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a e7       	ldi	r20, 0x7A	; 122
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	a9 87       	std	Y+9, r26	; 0x09
    1452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <APP_voidChangePassword+0x1a8>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <APP_voidChangePassword+0x226>
	else if (__tmp > 65535)
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <APP_voidChangePassword+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <APP_voidChangePassword+0x208>
    14b8:	80 e9       	ldi	r24, 0x90	; 144
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <APP_voidChangePassword+0x1f6>
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <APP_voidChangePassword+0x1ea>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <APP_voidChangePassword+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <APP_voidChangePassword+0x232>
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DELAY);

}
    1508:	6d 96       	adiw	r28, 0x1d	; 29
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <APP_voidWrongPasswordScreen>:

/******************************************************************/
/********A function to display wrong password + Tries left*********/
static void APP_voidWrongPasswordScreen(uint8 illetrations){
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	2f 97       	sbiw	r28, 0x0f	; 15
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	8f 87       	std	Y+15, r24	; 0x0f

	/* display : -
	 * "Wrong password !!"
	 * "tries left {illetrations}"
	 */
	LCD_clearScreen();
    1534:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>

	LCD_displayString("Wrong password !!");
    1538:	82 ef       	ldi	r24, 0xF2	; 242
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>
	LCD_displayString("Tries left ");
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_integerToString(illetrations);
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <LCD_integerToString>

	/*
	 * Turn the red led on for 3 seconds
	 */
	RED_LED_on();
    155a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <RED_LED_on>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	aa e7       	ldi	r26, 0x7A	; 122
    1564:	b4 e4       	ldi	r27, 0x44	; 68
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	9c 87       	std	Y+12, r25	; 0x0c
    156a:	ad 87       	std	Y+13, r26	; 0x0d
    156c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	55 e4       	ldi	r21, 0x45	; 69
    157e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	98 87       	std	Y+8, r25	; 0x08
    158a:	a9 87       	std	Y+9, r26	; 0x09
    158c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <APP_voidWrongPasswordScreen+0x92>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <APP_voidWrongPasswordScreen+0x110>
	else if (__tmp > 65535)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <APP_voidWrongPasswordScreen+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <APP_voidWrongPasswordScreen+0xf2>
    15f2:	80 e9       	ldi	r24, 0x90	; 144
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <APP_voidWrongPasswordScreen+0xe0>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <APP_voidWrongPasswordScreen+0xd4>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <APP_voidWrongPasswordScreen+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <APP_voidWrongPasswordScreen+0x11c>
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DELAY);

	/*
	 * Turn the red led off
	 */
	RED_LED_off();
    1642:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <RED_LED_off>
}
    1646:	2f 96       	adiw	r28, 0x0f	; 15
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <APP_voidThiefAlert>:

/****************************************************************************/
/********A function to Alert due to reaching the max number of tries*********/
static void APP_voidThiefAlert(){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	2e 97       	sbiw	r28, 0x0e	; 14
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61

	/* display : -
	 * "Wrong password !!"
	 */
	LCD_clearScreen();
    166c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("Thief Alert !!");
    1670:	80 e1       	ldi	r24, 0x10	; 16
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>

	/*
	 * Turn the red led on for 5 seconds
	 */
	RED_LED_on();
    1678:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <RED_LED_on>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e4       	ldi	r25, 0x40	; 64
    1680:	ac e9       	ldi	r26, 0x9C	; 156
    1682:	b5 e4       	ldi	r27, 0x45	; 69
    1684:	8b 87       	std	Y+11, r24	; 0x0b
    1686:	9c 87       	std	Y+12, r25	; 0x0c
    1688:	ad 87       	std	Y+13, r26	; 0x0d
    168a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8f 83       	std	Y+7, r24	; 0x07
    16a6:	98 87       	std	Y+8, r25	; 0x08
    16a8:	a9 87       	std	Y+9, r26	; 0x09
    16aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <APP_voidThiefAlert+0x76>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <APP_voidThiefAlert+0xf4>
	else if (__tmp > 65535)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <APP_voidThiefAlert+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	0f c0       	rjmp	.+30     	; 0x172e <APP_voidThiefAlert+0xd6>
    1710:	80 e9       	ldi	r24, 0x90	; 144
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <APP_voidThiefAlert+0xc4>
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <APP_voidThiefAlert+0xb8>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <APP_voidThiefAlert+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <APP_voidThiefAlert+0x100>
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	/*
	 * Turn the red led off
	 */
	RED_LED_off();
    1760:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <RED_LED_off>

	/* get back to the welcome screen*/
	APP_voidWelcomeScreen();
    1764:	0e 94 54 06 	call	0xca8	; 0xca8 <APP_voidWelcomeScreen>
}
    1768:	2e 96       	adiw	r28, 0x0e	; 14
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <APP_voidTruePasswordScreen>:

/*****************************************************/
/********A function to display True password *********/
static void APP_voidTruePasswordScreen(){
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	2e 97       	sbiw	r28, 0x0e	; 14
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61

	/* display : -
	 * "True password !!"
	 */
	LCD_clearScreen();
    178e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <LCD_clearScreen>
	LCD_displayString("True password !!");
    1792:	8f e1       	ldi	r24, 0x1F	; 31
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>

	/*
	 * Turn the green led on for 5 seconds
	 */
	GRN_LED_on();
    17a2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <GRN_LED_on>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e8       	ldi	r25, 0x80	; 128
    17aa:	ab e3       	ldi	r26, 0x3B	; 59
    17ac:	b5 e4       	ldi	r27, 0x45	; 69
    17ae:	8b 87       	std	Y+11, r24	; 0x0b
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	ad 87       	std	Y+13, r26	; 0x0d
    17b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	55 e4       	ldi	r21, 0x45	; 69
    17c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8f 83       	std	Y+7, r24	; 0x07
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	a9 87       	std	Y+9, r26	; 0x09
    17d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <APP_voidTruePasswordScreen+0x7e>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <APP_voidTruePasswordScreen+0xfc>
	else if (__tmp > 65535)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <APP_voidTruePasswordScreen+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <APP_voidTruePasswordScreen+0xde>
    183a:	80 e9       	ldi	r24, 0x90	; 144
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <APP_voidTruePasswordScreen+0xcc>
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <APP_voidTruePasswordScreen+0xc0>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <APP_voidTruePasswordScreen+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <APP_voidTruePasswordScreen+0x108>
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LONG_DELAY);

	/*
	 * Turn the green led off
	 */
	GRN_LED_off();
    188a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <GRN_LED_off>
}
    188e:	2e 96       	adiw	r28, 0x0e	; 14
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	27 97       	sbiw	r28, 0x07	; 7
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	6a 83       	std	Y+2, r22	; 0x02
    18b8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <GPIO_setupPinDirection+0x22>
    18c0:	d2 c0       	rjmp	.+420    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <GPIO_setupPinDirection+0x2a>
    18c8:	63 c0       	rjmp	.+198    	; 0x1990 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3f 83       	std	Y+7, r19	; 0x07
    18d2:	2e 83       	std	Y+6, r18	; 0x06
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	9f 81       	ldd	r25, Y+7	; 0x07
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	e9 f0       	breq	.+58     	; 0x1918 <GPIO_setupPinDirection+0x78>
    18de:	2e 81       	ldd	r18, Y+6	; 0x06
    18e0:	3f 81       	ldd	r19, Y+7	; 0x07
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	61 f1       	breq	.+88     	; 0x1940 <GPIO_setupPinDirection+0xa0>
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	9f 81       	ldd	r25, Y+7	; 0x07
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	e1 f5       	brne	.+120    	; 0x1968 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
    18f0:	aa e3       	ldi	r26, 0x3A	; 58
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_setupPinDirection+0x6e>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_setupPinDirection+0x6a>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	a7 c0       	rjmp	.+334    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
    1918:	a7 e3       	ldi	r26, 0x37	; 55
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_setupPinDirection+0x96>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_setupPinDirection+0x92>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	93 c0       	rjmp	.+294    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
    1940:	a4 e3       	ldi	r26, 0x34	; 52
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e4 e3       	ldi	r30, 0x34	; 52
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_setupPinDirection+0xbe>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_setupPinDirection+0xba>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	7f c0       	rjmp	.+254    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
    1968:	a1 e3       	ldi	r26, 0x31	; 49
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e1 e3       	ldi	r30, 0x31	; 49
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <GPIO_setupPinDirection+0xe6>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <GPIO_setupPinDirection+0xe2>
    198a:	84 2b       	or	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	6b c0       	rjmp	.+214    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 23       	and	r24, r24
    1994:	09 f0       	breq	.+2      	; 0x1998 <GPIO_setupPinDirection+0xf8>
    1996:	67 c0       	rjmp	.+206    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3d 83       	std	Y+5, r19	; 0x05
    19a0:	2c 83       	std	Y+4, r18	; 0x04
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	9d 81       	ldd	r25, Y+5	; 0x05
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	f9 f0       	breq	.+62     	; 0x19ea <GPIO_setupPinDirection+0x14a>
    19ac:	2c 81       	ldd	r18, Y+4	; 0x04
    19ae:	3d 81       	ldd	r19, Y+5	; 0x05
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	79 f1       	breq	.+94     	; 0x1a14 <GPIO_setupPinDirection+0x174>
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <GPIO_setupPinDirection+0x120>
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
    19c0:	aa e3       	ldi	r26, 0x3A	; 58
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ea e3       	ldi	r30, 0x3A	; 58
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <GPIO_setupPinDirection+0x13e>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <GPIO_setupPinDirection+0x13a>
    19e2:	80 95       	com	r24
    19e4:	84 23       	and	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	3e c0       	rjmp	.+124    	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
    19ea:	a7 e3       	ldi	r26, 0x37	; 55
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e7 e3       	ldi	r30, 0x37	; 55
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_setupPinDirection+0x168>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_setupPinDirection+0x164>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	29 c0       	rjmp	.+82     	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    1a14:	a4 e3       	ldi	r26, 0x34	; 52
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e4 e3       	ldi	r30, 0x34	; 52
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <GPIO_setupPinDirection+0x192>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <GPIO_setupPinDirection+0x18e>
    1a36:	80 95       	com	r24
    1a38:	84 23       	and	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    1a3e:	a1 e3       	ldi	r26, 0x31	; 49
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e1 e3       	ldi	r30, 0x31	; 49
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <GPIO_setupPinDirection+0x1bc>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <GPIO_setupPinDirection+0x1b8>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1a66:	27 96       	adiw	r28, 0x07	; 7
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <GPIO_setupPortDirection+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_setupPortDirection+0x8>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	30 f5       	brcc	.+76     	; 0x1ada <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3c 83       	std	Y+4, r19	; 0x04
    1a96:	2b 83       	std	Y+3, r18	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	71 f0       	breq	.+28     	; 0x1abe <GPIO_setupPortDirection+0x46>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <GPIO_setupPortDirection+0x50>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	79 f4       	brne	.+30     	; 0x1ad2 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    1ab4:	ea e3       	ldi	r30, 0x3A	; 58
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    1abe:	e7 e3       	ldi	r30, 0x37	; 55
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    1ac8:	e4 e3       	ldi	r30, 0x34	; 52
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    1ad2:	e1 e3       	ldi	r30, 0x31	; 49
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	27 97       	sbiw	r28, 0x07	; 7
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	6a 83       	std	Y+2, r22	; 0x02
    1b00:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <GPIO_writePin+0x22>
    1b08:	d9 c0       	rjmp	.+434    	; 0x1cbc <GPIO_writePin+0x1d4>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <GPIO_writePin+0x30>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 23       	and	r24, r24
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <GPIO_writePin+0x30>
    1b16:	d2 c0       	rjmp	.+420    	; 0x1cbc <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <GPIO_writePin+0x38>
    1b1e:	63 c0       	rjmp	.+198    	; 0x1be6 <GPIO_writePin+0xfe>
		{
			switch(port_num)
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	3f 83       	std	Y+7, r19	; 0x07
    1b28:	2e 83       	std	Y+6, r18	; 0x06
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	91 05       	cpc	r25, r1
    1b32:	e9 f0       	breq	.+58     	; 0x1b6e <GPIO_writePin+0x86>
    1b34:	2e 81       	ldd	r18, Y+6	; 0x06
    1b36:	3f 81       	ldd	r19, Y+7	; 0x07
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	61 f1       	breq	.+88     	; 0x1b96 <GPIO_writePin+0xae>
    1b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b40:	9f 81       	ldd	r25, Y+7	; 0x07
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	e1 f5       	brne	.+120    	; 0x1bbe <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    1b46:	ab e3       	ldi	r26, 0x3B	; 59
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	eb e3       	ldi	r30, 0x3B	; 59
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <GPIO_writePin+0x7c>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <GPIO_writePin+0x78>
    1b68:	84 2b       	or	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	a7 c0       	rjmp	.+334    	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    1b6e:	a8 e3       	ldi	r26, 0x38	; 56
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e8 e3       	ldi	r30, 0x38	; 56
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <GPIO_writePin+0xa4>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <GPIO_writePin+0xa0>
    1b90:	84 2b       	or	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	93 c0       	rjmp	.+294    	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    1b96:	a5 e3       	ldi	r26, 0x35	; 53
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e3       	ldi	r30, 0x35	; 53
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_writePin+0xcc>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_writePin+0xc8>
    1bb8:	84 2b       	or	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	7f c0       	rjmp	.+254    	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_writePin+0xf4>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_writePin+0xf0>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	6b c0       	rjmp	.+214    	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 23       	and	r24, r24
    1bea:	09 f0       	breq	.+2      	; 0x1bee <GPIO_writePin+0x106>
    1bec:	67 c0       	rjmp	.+206    	; 0x1cbc <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3d 83       	std	Y+5, r19	; 0x05
    1bf6:	2c 83       	std	Y+4, r18	; 0x04
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	f9 f0       	breq	.+62     	; 0x1c40 <GPIO_writePin+0x158>
    1c02:	2c 81       	ldd	r18, Y+4	; 0x04
    1c04:	3d 81       	ldd	r19, Y+5	; 0x05
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	79 f1       	breq	.+94     	; 0x1c6a <GPIO_writePin+0x182>
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <GPIO_writePin+0x12e>
    1c14:	3f c0       	rjmp	.+126    	; 0x1c94 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    1c16:	ab e3       	ldi	r26, 0x3B	; 59
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	eb e3       	ldi	r30, 0x3B	; 59
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_writePin+0x14c>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_writePin+0x148>
    1c38:	80 95       	com	r24
    1c3a:	84 23       	and	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	3e c0       	rjmp	.+124    	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    1c40:	a8 e3       	ldi	r26, 0x38	; 56
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e8 e3       	ldi	r30, 0x38	; 56
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_writePin+0x176>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <GPIO_writePin+0x172>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	29 c0       	rjmp	.+82     	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    1c6a:	a5 e3       	ldi	r26, 0x35	; 53
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e5 e3       	ldi	r30, 0x35	; 53
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_writePin+0x1a0>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_writePin+0x19c>
    1c8c:	80 95       	com	r24
    1c8e:	84 23       	and	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    1c94:	a2 e3       	ldi	r26, 0x32	; 50
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e2 e3       	ldi	r30, 0x32	; 50
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_writePin+0x1ca>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_writePin+0x1c6>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1cbc:	27 96       	adiw	r28, 0x07	; 7
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <GPIO_writePort+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_writePort+0x8>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	84 30       	cpi	r24, 0x04	; 4
    1ce2:	30 f5       	brcc	.+76     	; 0x1d30 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3c 83       	std	Y+4, r19	; 0x04
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	71 f0       	breq	.+28     	; 0x1d14 <GPIO_writePort+0x46>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <GPIO_writePort+0x50>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	79 f4       	brne	.+30     	; 0x1d28 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    1d0a:	eb e3       	ldi	r30, 0x3B	; 59
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	80 83       	st	Z, r24
    1d12:	0e c0       	rjmp	.+28     	; 0x1d30 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    1d14:	e8 e3       	ldi	r30, 0x38	; 56
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	80 83       	st	Z, r24
    1d1c:	09 c0       	rjmp	.+18     	; 0x1d30 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    1d1e:	e5 e3       	ldi	r30, 0x35	; 53
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	80 83       	st	Z, r24
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    1d28:	e2 e3       	ldi	r30, 0x32	; 50
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_readPin+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_readPin+0x8>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	10 f0       	brcs	.+4      	; 0x1d5a <GPIO_readPin+0x1c>
	{
		return 0;
    1d56:	1d 82       	std	Y+5, r1	; 0x05
    1d58:	5f c0       	rjmp	.+190    	; 0x1e18 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3c 83       	std	Y+4, r19	; 0x04
    1d62:	2b 83       	std	Y+3, r18	; 0x03
    1d64:	4b 81       	ldd	r20, Y+3	; 0x03
    1d66:	5c 81       	ldd	r21, Y+4	; 0x04
    1d68:	41 30       	cpi	r20, 0x01	; 1
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	e9 f0       	breq	.+58     	; 0x1da8 <GPIO_readPin+0x6a>
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	91 05       	cpc	r25, r1
    1d76:	59 f1       	breq	.+86     	; 0x1dce <GPIO_readPin+0x90>
    1d78:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	c9 f5       	brne	.+114    	; 0x1df4 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1d82:	e9 e3       	ldi	r30, 0x39	; 57
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a9 01       	movw	r20, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <GPIO_readPin+0x5c>
    1d96:	55 95       	asr	r21
    1d98:	47 95       	ror	r20
    1d9a:	8a 95       	dec	r24
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <GPIO_readPin+0x58>
    1d9e:	ca 01       	movw	r24, r20
    1da0:	58 2f       	mov	r21, r24
    1da2:	51 70       	andi	r21, 0x01	; 1
    1da4:	5d 83       	std	Y+5, r21	; 0x05
    1da6:	38 c0       	rjmp	.+112    	; 0x1e18 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1da8:	e6 e3       	ldi	r30, 0x36	; 54
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a9 01       	movw	r20, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_readPin+0x82>
    1dbc:	55 95       	asr	r21
    1dbe:	47 95       	ror	r20
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_readPin+0x7e>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	58 2f       	mov	r21, r24
    1dc8:	51 70       	andi	r21, 0x01	; 1
    1dca:	5d 83       	std	Y+5, r21	; 0x05
    1dcc:	25 c0       	rjmp	.+74     	; 0x1e18 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1dce:	e3 e3       	ldi	r30, 0x33	; 51
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a9 01       	movw	r20, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <GPIO_readPin+0xa8>
    1de2:	55 95       	asr	r21
    1de4:	47 95       	ror	r20
    1de6:	8a 95       	dec	r24
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <GPIO_readPin+0xa4>
    1dea:	ca 01       	movw	r24, r20
    1dec:	58 2f       	mov	r21, r24
    1dee:	51 70       	andi	r21, 0x01	; 1
    1df0:	5d 83       	std	Y+5, r21	; 0x05
    1df2:	12 c0       	rjmp	.+36     	; 0x1e18 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    1df4:	e0 e3       	ldi	r30, 0x30	; 48
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a9 01       	movw	r20, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_readPin+0xce>
    1e08:	55 95       	asr	r21
    1e0a:	47 95       	ror	r20
    1e0c:	8a 95       	dec	r24
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_readPin+0xca>
    1e10:	ca 01       	movw	r24, r20
    1e12:	58 2f       	mov	r21, r24
    1e14:	51 70       	andi	r21, 0x01	; 1
    1e16:	5d 83       	std	Y+5, r21	; 0x05
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <GPIO_readPort+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <GPIO_readPort+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	10 f0       	brcs	.+4      	; 0x1e42 <GPIO_readPort+0x18>
	{
		return 0;
    1e3e:	1c 82       	std	Y+4, r1	; 0x04
    1e40:	26 c0       	rjmp	.+76     	; 0x1e8e <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	3b 83       	std	Y+3, r19	; 0x03
    1e4a:	2a 83       	std	Y+2, r18	; 0x02
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	91 05       	cpc	r25, r1
    1e54:	71 f0       	breq	.+28     	; 0x1e72 <GPIO_readPort+0x48>
    1e56:	2a 81       	ldd	r18, Y+2	; 0x02
    1e58:	3b 81       	ldd	r19, Y+3	; 0x03
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	71 f0       	breq	.+28     	; 0x1e7c <GPIO_readPort+0x52>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	79 f4       	brne	.+30     	; 0x1e86 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    1e68:	e9 e3       	ldi	r30, 0x39	; 57
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	90 81       	ld	r25, Z
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    1e72:	e6 e3       	ldi	r30, 0x36	; 54
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	20 81       	ld	r18, Z
    1e78:	2c 83       	std	Y+4, r18	; 0x04
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    1e7c:	e3 e3       	ldi	r30, 0x33	; 51
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	30 81       	ld	r19, Z
    1e82:	3c 83       	std	Y+4, r19	; 0x04
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <GPIO_readPort+0x64>
		default:
			return PINC;
    1e86:	e3 e3       	ldi	r30, 0x33	; 51
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8c 83       	std	Y+4, r24	; 0x04
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <GRN_LED_init>:
/*
 * Description :
 * A function to initialize the GRN_LED
 */
void GRN_LED_init(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	/*Make the GRNLED pin output pin*/
	GPIO_setupPinDirection(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>

	/*Turn off the GRN_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <GRN_LED_on>:
/*
 * Description :
 * A function to turn on the GRN_LED
 */
void GRN_LED_on(void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the RED_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_OUTPUT);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <GRN_LED_off>:
/*
 * Description :
 * A function to turn off theGRN_LED
 */
void GRN_LED_off(void)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the RED_LED*/
	GPIO_writePin(GRN_LED_PORT,GRN_LED_PIN,PIN_INPUT);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <KEYPAD_getPressedKey+0x6>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	64 e0       	ldi	r22, 0x04	; 4
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	65 e0       	ldi	r22, 0x05	; 5
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	67 e0       	ldi	r22, 0x07	; 7
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	62 e0       	ldi	r22, 0x02	; 2
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	63 e0       	ldi	r22, 0x03	; 3
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1f4a:	1a 82       	std	Y+2, r1	; 0x02
    1f4c:	3c c0       	rjmp	.+120    	; 0x1fc6 <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	98 2f       	mov	r25, r24
    1f52:	9c 5f       	subi	r25, 0xFC	; 252
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	69 2f       	mov	r22, r25
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	98 2f       	mov	r25, r24
    1f62:	9c 5f       	subi	r25, 0xFC	; 252
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	69 2f       	mov	r22, r25
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	1c c0       	rjmp	.+56     	; 0x1faa <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	98 2f       	mov	r25, r24
    1f76:	9e 5f       	subi	r25, 0xFE	; 254
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	69 2f       	mov	r22, r25
    1f7c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_readPin>
    1f80:	88 23       	and	r24, r24
    1f82:	81 f4       	brne	.+32     	; 0x1fa4 <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	98 2f       	mov	r25, r24
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	89 0f       	add	r24, r25
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	08 f3       	brcs	.-62     	; 0x1f72 <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	98 2f       	mov	r25, r24
    1fb4:	9c 5f       	subi	r25, 0xFC	; 252
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	69 2f       	mov	r22, r25
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	84 30       	cpi	r24, 0x04	; 4
    1fca:	08 f2       	brcs	.-126    	; 0x1f4e <KEYPAD_getPressedKey+0x5e>
    1fcc:	be cf       	rjmp	.-132    	; 0x1f4a <KEYPAD_getPressedKey+0x5a>

00001fce <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	6c 97       	sbiw	r28, 0x1c	; 28
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 ea       	ldi	r26, 0xA0	; 160
    1ffc:	b1 e4       	ldi	r27, 0x41	; 65
    1ffe:	89 8f       	std	Y+25, r24	; 0x19
    2000:	9a 8f       	std	Y+26, r25	; 0x1a
    2002:	ab 8f       	std	Y+27, r26	; 0x1b
    2004:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	69 8d       	ldd	r22, Y+25	; 0x19
    2008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a e7       	ldi	r20, 0x7A	; 122
    2014:	55 e4       	ldi	r21, 0x45	; 69
    2016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8d 8b       	std	Y+21, r24	; 0x15
    2020:	9e 8b       	std	Y+22, r25	; 0x16
    2022:	af 8b       	std	Y+23, r26	; 0x17
    2024:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <LCD_init+0x7a>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	69 8d       	ldd	r22, Y+25	; 0x19
    2062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <LCD_init+0xda>
    208a:	80 e9       	ldi	r24, 0x90	; 144
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	89 8b       	std	Y+17, r24	; 0x11
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	9a 89       	ldd	r25, Y+18	; 0x12
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_init+0xc8>
    209a:	9a 8b       	std	Y+18, r25	; 0x12
    209c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	9c 89       	ldd	r25, Y+20	; 0x14
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <LCD_init+0xbc>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	8b 89       	ldd	r24, Y+19	; 0x13
    20c8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ca:	98 8b       	std	Y+16, r25	; 0x10
    20cc:	8f 87       	std	Y+15, r24	; 0x0f
    20ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d0:	98 89       	ldd	r25, Y+16	; 0x10
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_init+0x104>
    20d6:	98 8b       	std	Y+16, r25	; 0x10
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,PIN_OUTPUT);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	63 e0       	ldi	r22, 0x03	; 3
    20de:	41 e0       	ldi	r20, 0x01	; 1
    20e0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,PIN_OUTPUT);
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	64 e0       	ldi	r22, 0x04	; 4
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,PIN_OUTPUT);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	65 e0       	ldi	r22, 0x05	; 5
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,PIN_OUTPUT);
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	66 e0       	ldi	r22, 0x06	; 6
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 ea       	ldi	r26, 0xA0	; 160
    2108:	b1 e4       	ldi	r27, 0x41	; 65
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a e7       	ldi	r20, 0x7A	; 122
    2120:	55 e4       	ldi	r21, 0x45	; 69
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	a9 87       	std	Y+9, r26	; 0x09
    2130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_init+0x186>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_init+0x204>
	else if (__tmp > 65535)
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_init+0x1e6>
    2196:	80 e9       	ldi	r24, 0x90	; 144
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_init+0x1d4>
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_init+0x1c8>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_init+0x210>
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    21e6:	83 e3       	ldi	r24, 0x33	; 51
    21e8:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    21ec:	82 e3       	ldi	r24, 0x32	; 50
    21ee:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    21f2:	88 e2       	ldi	r24, 0x28	; 40
    21f4:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    21f8:	8c e0       	ldi	r24, 0x0C	; 12
    21fa:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
}
    2204:	6c 96       	adiw	r28, 0x1c	; 28
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	c5 59       	subi	r28, 0x95	; 149
    2224:	d0 40       	sbci	r29, 0x00	; 0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	fe 01       	movw	r30, r28
    2232:	eb 56       	subi	r30, 0x6B	; 107
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    2242:	fe 01       	movw	r30, r28
    2244:	ef 56       	subi	r30, 0x6F	; 111
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e8       	ldi	r26, 0x80	; 128
    224e:	bf e3       	ldi	r27, 0x3F	; 63
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2258:	8e 01       	movw	r16, r28
    225a:	03 57       	subi	r16, 0x73	; 115
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	ef 56       	subi	r30, 0x6F	; 111
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	2b ea       	ldi	r18, 0xAB	; 171
    226e:	3a ea       	ldi	r19, 0xAA	; 170
    2270:	4a ea       	ldi	r20, 0xAA	; 170
    2272:	50 e4       	ldi	r21, 0x40	; 64
    2274:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2286:	fe 01       	movw	r30, r28
    2288:	e3 57       	subi	r30, 0x73	; 115
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	34 f4       	brge	.+12     	; 0x22b0 <LCD_sendCommand+0x9a>
		__ticks = 1;
    22a4:	fe 01       	movw	r30, r28
    22a6:	e4 57       	subi	r30, 0x74	; 116
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 83       	st	Z, r24
    22ae:	e0 c0       	rjmp	.+448    	; 0x2470 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    22b0:	fe 01       	movw	r30, r28
    22b2:	e3 57       	subi	r30, 0x73	; 115
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <LCD_sendCommand+0xba>
    22ce:	c0 c0       	rjmp	.+384    	; 0x2450 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    22d0:	fe 01       	movw	r30, r28
    22d2:	ef 56       	subi	r30, 0x6F	; 111
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a e7       	ldi	r20, 0x7A	; 122
    22e4:	54 e4       	ldi	r21, 0x44	; 68
    22e6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	fe 01       	movw	r30, r28
    22f0:	e8 57       	subi	r30, 0x78	; 120
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 83       	st	Z, r24
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	a2 83       	std	Z+2, r26	; 0x02
    22fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	8e 01       	movw	r16, r28
    22fe:	0c 57       	subi	r16, 0x7C	; 124
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	e8 57       	subi	r30, 0x78	; 120
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	55 e4       	ldi	r21, 0x45	; 69
    2318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	f8 01       	movw	r30, r16
    2322:	80 83       	st	Z, r24
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	a2 83       	std	Z+2, r26	; 0x02
    2328:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    232a:	fe 01       	movw	r30, r28
    232c:	ec 57       	subi	r30, 0x7C	; 124
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	44 f4       	brge	.+16     	; 0x2358 <LCD_sendCommand+0x142>
		__ticks = 1;
    2348:	fe 01       	movw	r30, r28
    234a:	ee 57       	subi	r30, 0x7E	; 126
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
    2356:	64 c0       	rjmp	.+200    	; 0x2420 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    2358:	fe 01       	movw	r30, r28
    235a:	ec 57       	subi	r30, 0x7C	; 124
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	0c f0       	brlt	.+2      	; 0x2378 <LCD_sendCommand+0x162>
    2376:	43 c0       	rjmp	.+134    	; 0x23fe <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	fe 01       	movw	r30, r28
    237a:	e8 57       	subi	r30, 0x78	; 120
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8e 01       	movw	r16, r28
    2398:	0e 57       	subi	r16, 0x7E	; 126
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	f8 01       	movw	r30, r16
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	1f c0       	rjmp	.+62     	; 0x23ee <LCD_sendCommand+0x1d8>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e0 58       	subi	r30, 0x80	; 128
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 e9       	ldi	r24, 0x90	; 144
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
    23be:	fe 01       	movw	r30, r28
    23c0:	e0 58       	subi	r30, 0x80	; 128
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_sendCommand+0x1b2>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e0 58       	subi	r30, 0x80	; 128
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	de 01       	movw	r26, r28
    23d8:	ae 57       	subi	r26, 0x7E	; 126
    23da:	bf 4f       	sbci	r27, 0xFF	; 255
    23dc:	fe 01       	movw	r30, r28
    23de:	ee 57       	subi	r30, 0x7E	; 126
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	11 96       	adiw	r26, 0x01	; 1
    23ea:	9c 93       	st	X, r25
    23ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	fe 01       	movw	r30, r28
    23f0:	ee 57       	subi	r30, 0x7E	; 126
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	d1 f6       	brne	.-76     	; 0x23b0 <LCD_sendCommand+0x19a>
    23fc:	4b c0       	rjmp	.+150    	; 0x2494 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	8e 01       	movw	r16, r28
    2400:	0e 57       	subi	r16, 0x7E	; 126
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	ec 57       	subi	r30, 0x7C	; 124
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	f8 01       	movw	r30, r16
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	de 01       	movw	r26, r28
    2422:	a2 58       	subi	r26, 0x82	; 130
    2424:	bf 4f       	sbci	r27, 0xFF	; 255
    2426:	fe 01       	movw	r30, r28
    2428:	ee 57       	subi	r30, 0x7E	; 126
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	11 96       	adiw	r26, 0x01	; 1
    2432:	9c 93       	st	X, r25
    2434:	8e 93       	st	-X, r24
    2436:	fe 01       	movw	r30, r28
    2438:	e2 58       	subi	r30, 0x82	; 130
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_sendCommand+0x22a>
    2444:	fe 01       	movw	r30, r28
    2446:	e2 58       	subi	r30, 0x82	; 130
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	22 c0       	rjmp	.+68     	; 0x2494 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2450:	8e 01       	movw	r16, r28
    2452:	04 57       	subi	r16, 0x74	; 116
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e3 57       	subi	r30, 0x73	; 115
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	80 83       	st	Z, r24
    2470:	de 01       	movw	r26, r28
    2472:	a3 58       	subi	r26, 0x83	; 131
    2474:	bf 4f       	sbci	r27, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	e4 57       	subi	r30, 0x74	; 116
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2480:	fe 01       	movw	r30, r28
    2482:	e3 58       	subi	r30, 0x83	; 131
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	8a 95       	dec	r24
    248a:	f1 f7       	brne	.-4      	; 0x2488 <LCD_sendCommand+0x272>
    248c:	fe 01       	movw	r30, r28
    248e:	e3 58       	subi	r30, 0x83	; 131
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    249e:	fe 01       	movw	r30, r28
    24a0:	e7 58       	subi	r30, 0x87	; 135
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e8       	ldi	r26, 0x80	; 128
    24aa:	bf e3       	ldi	r27, 0x3F	; 63
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24b4:	8e 01       	movw	r16, r28
    24b6:	0b 58       	subi	r16, 0x8B	; 139
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	fe 01       	movw	r30, r28
    24bc:	e7 58       	subi	r30, 0x87	; 135
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	2b ea       	ldi	r18, 0xAB	; 171
    24ca:	3a ea       	ldi	r19, 0xAA	; 170
    24cc:	4a ea       	ldi	r20, 0xAA	; 170
    24ce:	50 e4       	ldi	r21, 0x40	; 64
    24d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	80 83       	st	Z, r24
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	a2 83       	std	Z+2, r26	; 0x02
    24e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e2:	fe 01       	movw	r30, r28
    24e4:	eb 58       	subi	r30, 0x8B	; 139
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	34 f4       	brge	.+12     	; 0x250c <LCD_sendCommand+0x2f6>
		__ticks = 1;
    2500:	fe 01       	movw	r30, r28
    2502:	ec 58       	subi	r30, 0x8C	; 140
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	80 83       	st	Z, r24
    250a:	e0 c0       	rjmp	.+448    	; 0x26cc <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    250c:	fe 01       	movw	r30, r28
    250e:	eb 58       	subi	r30, 0x8B	; 139
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	53 e4       	ldi	r21, 0x43	; 67
    2522:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	0c f0       	brlt	.+2      	; 0x252c <LCD_sendCommand+0x316>
    252a:	c0 c0       	rjmp	.+384    	; 0x26ac <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    252c:	fe 01       	movw	r30, r28
    252e:	e7 58       	subi	r30, 0x87	; 135
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	54 e4       	ldi	r21, 0x44	; 68
    2542:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	fe 01       	movw	r30, r28
    254c:	e0 59       	subi	r30, 0x90	; 144
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	a2 83       	std	Z+2, r26	; 0x02
    2556:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	8e 01       	movw	r16, r28
    255a:	04 59       	subi	r16, 0x94	; 148
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e0 59       	subi	r30, 0x90	; 144
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	55 e4       	ldi	r21, 0x45	; 69
    2574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	f8 01       	movw	r30, r16
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2586:	fe 01       	movw	r30, r28
    2588:	e4 59       	subi	r30, 0x94	; 148
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	44 f4       	brge	.+16     	; 0x25b4 <LCD_sendCommand+0x39e>
		__ticks = 1;
    25a4:	fe 01       	movw	r30, r28
    25a6:	e6 59       	subi	r30, 0x96	; 150
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
    25b2:	64 c0       	rjmp	.+200    	; 0x267c <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e4 59       	subi	r30, 0x94	; 148
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <LCD_sendCommand+0x3be>
    25d2:	43 c0       	rjmp	.+134    	; 0x265a <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	fe 01       	movw	r30, r28
    25d6:	e0 59       	subi	r30, 0x90	; 144
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	8e 01       	movw	r16, r28
    25f4:	06 59       	subi	r16, 0x96	; 150
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	f8 01       	movw	r30, r16
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	1f c0       	rjmp	.+62     	; 0x264a <LCD_sendCommand+0x434>
    260c:	fe 01       	movw	r30, r28
    260e:	e8 59       	subi	r30, 0x98	; 152
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 e9       	ldi	r24, 0x90	; 144
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    261a:	fe 01       	movw	r30, r28
    261c:	e8 59       	subi	r30, 0x98	; 152
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_sendCommand+0x40e>
    2628:	fe 01       	movw	r30, r28
    262a:	e8 59       	subi	r30, 0x98	; 152
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	de 01       	movw	r26, r28
    2634:	a6 59       	subi	r26, 0x96	; 150
    2636:	bf 4f       	sbci	r27, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	e6 59       	subi	r30, 0x96	; 150
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	11 96       	adiw	r26, 0x01	; 1
    2646:	9c 93       	st	X, r25
    2648:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	fe 01       	movw	r30, r28
    264c:	e6 59       	subi	r30, 0x96	; 150
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	d1 f6       	brne	.-76     	; 0x260c <LCD_sendCommand+0x3f6>
    2658:	4b c0       	rjmp	.+150    	; 0x26f0 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	8e 01       	movw	r16, r28
    265c:	06 59       	subi	r16, 0x96	; 150
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	fe 01       	movw	r30, r28
    2662:	e4 59       	subi	r30, 0x94	; 148
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	de 01       	movw	r26, r28
    267e:	aa 59       	subi	r26, 0x9A	; 154
    2680:	bf 4f       	sbci	r27, 0xFF	; 255
    2682:	fe 01       	movw	r30, r28
    2684:	e6 59       	subi	r30, 0x96	; 150
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	9c 93       	st	X, r25
    2690:	8e 93       	st	-X, r24
    2692:	fe 01       	movw	r30, r28
    2694:	ea 59       	subi	r30, 0x9A	; 154
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <LCD_sendCommand+0x486>
    26a0:	fe 01       	movw	r30, r28
    26a2:	ea 59       	subi	r30, 0x9A	; 154
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	22 c0       	rjmp	.+68     	; 0x26f0 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ac:	8e 01       	movw	r16, r28
    26ae:	0c 58       	subi	r16, 0x8C	; 140
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	eb 58       	subi	r30, 0x8B	; 139
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	f8 01       	movw	r30, r16
    26ca:	80 83       	st	Z, r24
    26cc:	de 01       	movw	r26, r28
    26ce:	ab 59       	subi	r26, 0x9B	; 155
    26d0:	bf 4f       	sbci	r27, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	ec 58       	subi	r30, 0x8C	; 140
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26dc:	fe 01       	movw	r30, r28
    26de:	eb 59       	subi	r30, 0x9B	; 155
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	8a 95       	dec	r24
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_sendCommand+0x4ce>
    26e8:	fe 01       	movw	r30, r28
    26ea:	eb 59       	subi	r30, 0x9B	; 155
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    26f0:	fe 01       	movw	r30, r28
    26f2:	eb 56       	subi	r30, 0x6B	; 107
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	82 95       	swap	r24
    26fa:	8f 70       	andi	r24, 0x0F	; 15
    26fc:	98 2f       	mov	r25, r24
    26fe:	91 70       	andi	r25, 0x01	; 1
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	63 e0       	ldi	r22, 0x03	; 3
    2704:	49 2f       	mov	r20, r25
    2706:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    270a:	fe 01       	movw	r30, r28
    270c:	eb 56       	subi	r30, 0x6B	; 107
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	82 95       	swap	r24
    2714:	86 95       	lsr	r24
    2716:	87 70       	andi	r24, 0x07	; 7
    2718:	98 2f       	mov	r25, r24
    271a:	91 70       	andi	r25, 0x01	; 1
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	64 e0       	ldi	r22, 0x04	; 4
    2720:	49 2f       	mov	r20, r25
    2722:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    2726:	fe 01       	movw	r30, r28
    2728:	eb 56       	subi	r30, 0x6B	; 107
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	82 95       	swap	r24
    2730:	86 95       	lsr	r24
    2732:	86 95       	lsr	r24
    2734:	83 70       	andi	r24, 0x03	; 3
    2736:	98 2f       	mov	r25, r24
    2738:	91 70       	andi	r25, 0x01	; 1
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	65 e0       	ldi	r22, 0x05	; 5
    273e:	49 2f       	mov	r20, r25
    2740:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    2744:	fe 01       	movw	r30, r28
    2746:	eb 56       	subi	r30, 0x6B	; 107
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	98 2f       	mov	r25, r24
    274e:	99 1f       	adc	r25, r25
    2750:	99 27       	eor	r25, r25
    2752:	99 1f       	adc	r25, r25
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	66 e0       	ldi	r22, 0x06	; 6
    2758:	49 2f       	mov	r20, r25
    275a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    275e:	fe 01       	movw	r30, r28
    2760:	ef 59       	subi	r30, 0x9F	; 159
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e8       	ldi	r26, 0x80	; 128
    276a:	bf e3       	ldi	r27, 0x3F	; 63
    276c:	80 83       	st	Z, r24
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	a2 83       	std	Z+2, r26	; 0x02
    2772:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	8e 01       	movw	r16, r28
    2776:	03 5a       	subi	r16, 0xA3	; 163
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	ef 59       	subi	r30, 0x9F	; 159
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e7       	ldi	r20, 0x7A	; 122
    278e:	55 e4       	ldi	r21, 0x45	; 69
    2790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	f8 01       	movw	r30, r16
    279a:	80 83       	st	Z, r24
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	a2 83       	std	Z+2, r26	; 0x02
    27a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a2:	fe 01       	movw	r30, r28
    27a4:	e3 5a       	subi	r30, 0xA3	; 163
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	44 f4       	brge	.+16     	; 0x27d0 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    27c0:	fe 01       	movw	r30, r28
    27c2:	e5 5a       	subi	r30, 0xA5	; 165
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	64 c0       	rjmp	.+200    	; 0x2898 <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    27d0:	fe 01       	movw	r30, r28
    27d2:	e3 5a       	subi	r30, 0xA3	; 163
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <LCD_sendCommand+0x5da>
    27ee:	43 c0       	rjmp	.+134    	; 0x2876 <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	fe 01       	movw	r30, r28
    27f2:	ef 59       	subi	r30, 0x9F	; 159
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8e 01       	movw	r16, r28
    2810:	05 5a       	subi	r16, 0xA5	; 165
    2812:	1f 4f       	sbci	r17, 0xFF	; 255
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	f8 01       	movw	r30, r16
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
    2826:	1f c0       	rjmp	.+62     	; 0x2866 <LCD_sendCommand+0x650>
    2828:	fe 01       	movw	r30, r28
    282a:	e7 5a       	subi	r30, 0xA7	; 167
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 e9       	ldi	r24, 0x90	; 144
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2836:	fe 01       	movw	r30, r28
    2838:	e7 5a       	subi	r30, 0xA7	; 167
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_sendCommand+0x62a>
    2844:	fe 01       	movw	r30, r28
    2846:	e7 5a       	subi	r30, 0xA7	; 167
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	de 01       	movw	r26, r28
    2850:	a5 5a       	subi	r26, 0xA5	; 165
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e5 5a       	subi	r30, 0xA5	; 165
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	11 96       	adiw	r26, 0x01	; 1
    2862:	9c 93       	st	X, r25
    2864:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	fe 01       	movw	r30, r28
    2868:	e5 5a       	subi	r30, 0xA5	; 165
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	d1 f6       	brne	.-76     	; 0x2828 <LCD_sendCommand+0x612>
    2874:	27 c0       	rjmp	.+78     	; 0x28c4 <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	8e 01       	movw	r16, r28
    2878:	05 5a       	subi	r16, 0xA5	; 165
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	e3 5a       	subi	r30, 0xA3	; 163
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	de 01       	movw	r26, r28
    289a:	a9 5a       	subi	r26, 0xA9	; 169
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e5 5a       	subi	r30, 0xA5	; 165
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	8d 93       	st	X+, r24
    28aa:	9c 93       	st	X, r25
    28ac:	fe 01       	movw	r30, r28
    28ae:	e9 5a       	subi	r30, 0xA9	; 169
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_sendCommand+0x6a0>
    28ba:	fe 01       	movw	r30, r28
    28bc:	e9 5a       	subi	r30, 0xA9	; 169
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    28ce:	fe 01       	movw	r30, r28
    28d0:	ed 5a       	subi	r30, 0xAD	; 173
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e8       	ldi	r26, 0x80	; 128
    28da:	bf e3       	ldi	r27, 0x3F	; 63
    28dc:	80 83       	st	Z, r24
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	a2 83       	std	Z+2, r26	; 0x02
    28e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28e4:	8e 01       	movw	r16, r28
    28e6:	01 5b       	subi	r16, 0xB1	; 177
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5a       	subi	r30, 0xAD	; 173
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	2b ea       	ldi	r18, 0xAB	; 171
    28fa:	3a ea       	ldi	r19, 0xAA	; 170
    28fc:	4a ea       	ldi	r20, 0xAA	; 170
    28fe:	50 e4       	ldi	r21, 0x40	; 64
    2900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2912:	fe 01       	movw	r30, r28
    2914:	e1 5b       	subi	r30, 0xB1	; 177
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	34 f4       	brge	.+12     	; 0x293c <LCD_sendCommand+0x726>
		__ticks = 1;
    2930:	fe 01       	movw	r30, r28
    2932:	e2 5b       	subi	r30, 0xB2	; 178
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	80 83       	st	Z, r24
    293a:	e0 c0       	rjmp	.+448    	; 0x2afc <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    293c:	fe 01       	movw	r30, r28
    293e:	e1 5b       	subi	r30, 0xB1	; 177
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	53 e4       	ldi	r21, 0x43	; 67
    2952:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <LCD_sendCommand+0x746>
    295a:	c0 c0       	rjmp	.+384    	; 0x2adc <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    295c:	fe 01       	movw	r30, r28
    295e:	ed 5a       	subi	r30, 0xAD	; 173
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a e7       	ldi	r20, 0x7A	; 122
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	fe 01       	movw	r30, r28
    297c:	e6 5b       	subi	r30, 0xB6	; 182
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	0a 5b       	subi	r16, 0xBA	; 186
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	e6 5b       	subi	r30, 0xB6	; 182
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a e7       	ldi	r20, 0x7A	; 122
    29a2:	55 e4       	ldi	r21, 0x45	; 69
    29a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	ea 5b       	subi	r30, 0xBA	; 186
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	44 f4       	brge	.+16     	; 0x29e4 <LCD_sendCommand+0x7ce>
		__ticks = 1;
    29d4:	fe 01       	movw	r30, r28
    29d6:	ec 5b       	subi	r30, 0xBC	; 188
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	64 c0       	rjmp	.+200    	; 0x2aac <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    29e4:	fe 01       	movw	r30, r28
    29e6:	ea 5b       	subi	r30, 0xBA	; 186
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <LCD_sendCommand+0x7ee>
    2a02:	43 c0       	rjmp	.+134    	; 0x2a8a <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	fe 01       	movw	r30, r28
    2a06:	e6 5b       	subi	r30, 0xB6	; 182
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8e 01       	movw	r16, r28
    2a24:	0c 5b       	subi	r16, 0xBC	; 188
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	1f c0       	rjmp	.+62     	; 0x2a7a <LCD_sendCommand+0x864>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ee 5b       	subi	r30, 0xBE	; 190
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 e9       	ldi	r24, 0x90	; 144
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ee 5b       	subi	r30, 0xBE	; 190
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_sendCommand+0x83e>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ee 5b       	subi	r30, 0xBE	; 190
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	de 01       	movw	r26, r28
    2a64:	ac 5b       	subi	r26, 0xBC	; 188
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ec 5b       	subi	r30, 0xBC	; 188
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ec 5b       	subi	r30, 0xBC	; 188
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	d1 f6       	brne	.-76     	; 0x2a3c <LCD_sendCommand+0x826>
    2a88:	42 c0       	rjmp	.+132    	; 0x2b0e <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	0c 5b       	subi	r16, 0xBC	; 188
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	ea 5b       	subi	r30, 0xBA	; 186
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	de 01       	movw	r26, r28
    2aae:	a0 5c       	subi	r26, 0xC0	; 192
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ec 5b       	subi	r30, 0xBC	; 188
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	11 96       	adiw	r26, 0x01	; 1
    2abe:	9c 93       	st	X, r25
    2ac0:	8e 93       	st	-X, r24
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e0 5c       	subi	r30, 0xC0	; 192
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_sendCommand+0x8b6>
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e0 5c       	subi	r30, 0xC0	; 192
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	19 c0       	rjmp	.+50     	; 0x2b0e <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2adc:	8e 01       	movw	r16, r28
    2ade:	02 5b       	subi	r16, 0xB2	; 178
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e1 5b       	subi	r30, 0xB1	; 177
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	f8 01       	movw	r30, r16
    2afa:	80 83       	st	Z, r24
    2afc:	fe 01       	movw	r30, r28
    2afe:	e2 5b       	subi	r30, 0xB2	; 178
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 81       	ld	r24, Z
    2b04:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b08:	8a 95       	dec	r24
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_sendCommand+0x8f2>
    2b0c:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	62 e0       	ldi	r22, 0x02	; 2
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	8b af       	std	Y+59, r24	; 0x3b
    2b22:	9c af       	std	Y+60, r25	; 0x3c
    2b24:	ad af       	std	Y+61, r26	; 0x3d
    2b26:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b28:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b2a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b30:	2b ea       	ldi	r18, 0xAB	; 171
    2b32:	3a ea       	ldi	r19, 0xAA	; 170
    2b34:	4a ea       	ldi	r20, 0xAA	; 170
    2b36:	50 e4       	ldi	r21, 0x40	; 64
    2b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f ab       	std	Y+55, r24	; 0x37
    2b42:	98 af       	std	Y+56, r25	; 0x38
    2b44:	a9 af       	std	Y+57, r26	; 0x39
    2b46:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2b48:	6f a9       	ldd	r22, Y+55	; 0x37
    2b4a:	78 ad       	ldd	r23, Y+56	; 0x38
    2b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	1c f4       	brge	.+6      	; 0x2b66 <LCD_sendCommand+0x950>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	8e ab       	std	Y+54, r24	; 0x36
    2b64:	91 c0       	rjmp	.+290    	; 0x2c88 <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    2b66:	6f a9       	ldd	r22, Y+55	; 0x37
    2b68:	78 ad       	ldd	r23, Y+56	; 0x38
    2b6a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4f e7       	ldi	r20, 0x7F	; 127
    2b74:	53 e4       	ldi	r21, 0x43	; 67
    2b76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	0c f0       	brlt	.+2      	; 0x2b80 <LCD_sendCommand+0x96a>
    2b7e:	7b c0       	rjmp	.+246    	; 0x2c76 <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    2b80:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b82:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4a e7       	ldi	r20, 0x7A	; 122
    2b8e:	54 e4       	ldi	r21, 0x44	; 68
    2b90:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	8a ab       	std	Y+50, r24	; 0x32
    2b9a:	9b ab       	std	Y+51, r25	; 0x33
    2b9c:	ac ab       	std	Y+52, r26	; 0x34
    2b9e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	6a a9       	ldd	r22, Y+50	; 0x32
    2ba2:	7b a9       	ldd	r23, Y+51	; 0x33
    2ba4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ba6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a e7       	ldi	r20, 0x7A	; 122
    2bae:	55 e4       	ldi	r21, 0x45	; 69
    2bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	8e a7       	std	Y+46, r24	; 0x2e
    2bba:	9f a7       	std	Y+47, r25	; 0x2f
    2bbc:	a8 ab       	std	Y+48, r26	; 0x30
    2bbe:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2bc0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bc2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bc4:	88 a9       	ldd	r24, Y+48	; 0x30
    2bc6:	99 a9       	ldd	r25, Y+49	; 0x31
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e8       	ldi	r20, 0x80	; 128
    2bce:	5f e3       	ldi	r21, 0x3F	; 63
    2bd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bd4:	88 23       	and	r24, r24
    2bd6:	2c f4       	brge	.+10     	; 0x2be2 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9d a7       	std	Y+45, r25	; 0x2d
    2bde:	8c a7       	std	Y+44, r24	; 0x2c
    2be0:	3f c0       	rjmp	.+126    	; 0x2c60 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    2be2:	6e a5       	ldd	r22, Y+46	; 0x2e
    2be4:	7f a5       	ldd	r23, Y+47	; 0x2f
    2be6:	88 a9       	ldd	r24, Y+48	; 0x30
    2be8:	99 a9       	ldd	r25, Y+49	; 0x31
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	3f ef       	ldi	r19, 0xFF	; 255
    2bee:	4f e7       	ldi	r20, 0x7F	; 127
    2bf0:	57 e4       	ldi	r21, 0x47	; 71
    2bf2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bf6:	18 16       	cp	r1, r24
    2bf8:	4c f5       	brge	.+82     	; 0x2c4c <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfa:	6a a9       	ldd	r22, Y+50	; 0x32
    2bfc:	7b a9       	ldd	r23, Y+51	; 0x33
    2bfe:	8c a9       	ldd	r24, Y+52	; 0x34
    2c00:	9d a9       	ldd	r25, Y+53	; 0x35
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e2       	ldi	r20, 0x20	; 32
    2c08:	51 e4       	ldi	r21, 0x41	; 65
    2c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9d a7       	std	Y+45, r25	; 0x2d
    2c20:	8c a7       	std	Y+44, r24	; 0x2c
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <LCD_sendCommand+0xa2c>
    2c24:	80 e9       	ldi	r24, 0x90	; 144
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	9b a7       	std	Y+43, r25	; 0x2b
    2c2a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c2c:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c2e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_sendCommand+0xa1a>
    2c34:	9b a7       	std	Y+43, r25	; 0x2b
    2c36:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c38:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c3a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	9d a7       	std	Y+45, r25	; 0x2d
    2c40:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c42:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c44:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	69 f7       	brne	.-38     	; 0x2c24 <LCD_sendCommand+0xa0e>
    2c4a:	24 c0       	rjmp	.+72     	; 0x2c94 <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c4e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c50:	88 a9       	ldd	r24, Y+48	; 0x30
    2c52:	99 a9       	ldd	r25, Y+49	; 0x31
    2c54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9d a7       	std	Y+45, r25	; 0x2d
    2c5e:	8c a7       	std	Y+44, r24	; 0x2c
    2c60:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c62:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c64:	99 a7       	std	Y+41, r25	; 0x29
    2c66:	88 a7       	std	Y+40, r24	; 0x28
    2c68:	88 a5       	ldd	r24, Y+40	; 0x28
    2c6a:	99 a5       	ldd	r25, Y+41	; 0x29
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_sendCommand+0xa56>
    2c70:	99 a7       	std	Y+41, r25	; 0x29
    2c72:	88 a7       	std	Y+40, r24	; 0x28
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c76:	6f a9       	ldd	r22, Y+55	; 0x37
    2c78:	78 ad       	ldd	r23, Y+56	; 0x38
    2c7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8e ab       	std	Y+54, r24	; 0x36
    2c88:	8e a9       	ldd	r24, Y+54	; 0x36
    2c8a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c8c:	8f a1       	ldd	r24, Y+39	; 0x27
    2c8e:	8a 95       	dec	r24
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_sendCommand+0xa78>
    2c92:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    2c94:	fe 01       	movw	r30, r28
    2c96:	eb 56       	subi	r30, 0x6B	; 107
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	98 2f       	mov	r25, r24
    2c9e:	91 70       	andi	r25, 0x01	; 1
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	63 e0       	ldi	r22, 0x03	; 3
    2ca4:	49 2f       	mov	r20, r25
    2ca6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    2caa:	fe 01       	movw	r30, r28
    2cac:	eb 56       	subi	r30, 0x6B	; 107
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	86 95       	lsr	r24
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	91 70       	andi	r25, 0x01	; 1
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	49 2f       	mov	r20, r25
    2cbe:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	eb 56       	subi	r30, 0x6B	; 107
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	86 95       	lsr	r24
    2ccc:	86 95       	lsr	r24
    2cce:	98 2f       	mov	r25, r24
    2cd0:	91 70       	andi	r25, 0x01	; 1
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	65 e0       	ldi	r22, 0x05	; 5
    2cd6:	49 2f       	mov	r20, r25
    2cd8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    2cdc:	fe 01       	movw	r30, r28
    2cde:	eb 56       	subi	r30, 0x6B	; 107
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	86 95       	lsr	r24
    2ce6:	86 95       	lsr	r24
    2ce8:	86 95       	lsr	r24
    2cea:	98 2f       	mov	r25, r24
    2cec:	91 70       	andi	r25, 0x01	; 1
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	66 e0       	ldi	r22, 0x06	; 6
    2cf2:	49 2f       	mov	r20, r25
    2cf4:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e8       	ldi	r26, 0x80	; 128
    2cfe:	bf e3       	ldi	r27, 0x3F	; 63
    2d00:	8b a3       	std	Y+35, r24	; 0x23
    2d02:	9c a3       	std	Y+36, r25	; 0x24
    2d04:	ad a3       	std	Y+37, r26	; 0x25
    2d06:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	4a e7       	ldi	r20, 0x7A	; 122
    2d16:	55 e4       	ldi	r21, 0x45	; 69
    2d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	8f 8f       	std	Y+31, r24	; 0x1f
    2d22:	98 a3       	std	Y+32, r25	; 0x20
    2d24:	a9 a3       	std	Y+33, r26	; 0x21
    2d26:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d28:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d2a:	78 a1       	ldd	r23, Y+32	; 0x20
    2d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	2c f4       	brge	.+10     	; 0x2d4a <LCD_sendCommand+0xb34>
		__ticks = 1;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9e 8f       	std	Y+30, r25	; 0x1e
    2d46:	8d 8f       	std	Y+29, r24	; 0x1d
    2d48:	3f c0       	rjmp	.+126    	; 0x2dc8 <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    2d4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d4c:	78 a1       	ldd	r23, Y+32	; 0x20
    2d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d50:	9a a1       	ldd	r25, Y+34	; 0x22
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	57 e4       	ldi	r21, 0x47	; 71
    2d5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	4c f5       	brge	.+82     	; 0x2db4 <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d62:	6b a1       	ldd	r22, Y+35	; 0x23
    2d64:	7c a1       	ldd	r23, Y+36	; 0x24
    2d66:	8d a1       	ldd	r24, Y+37	; 0x25
    2d68:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 8f       	std	Y+30, r25	; 0x1e
    2d88:	8d 8f       	std	Y+29, r24	; 0x1d
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <LCD_sendCommand+0xb94>
    2d8c:	80 e9       	ldi	r24, 0x90	; 144
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	9c 8f       	std	Y+28, r25	; 0x1c
    2d92:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_sendCommand+0xb82>
    2d9c:	9c 8f       	std	Y+28, r25	; 0x1c
    2d9e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	9e 8f       	std	Y+30, r25	; 0x1e
    2da8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <LCD_sendCommand+0xb76>
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2db6:	78 a1       	ldd	r23, Y+32	; 0x20
    2db8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dba:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dcc:	9a 8f       	std	Y+26, r25	; 0x1a
    2dce:	89 8f       	std	Y+25, r24	; 0x19
    2dd0:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <LCD_sendCommand+0xbbe>
    2dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dda:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	62 e0       	ldi	r22, 0x02	; 2
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 e8       	ldi	r26, 0x80	; 128
    2dec:	bf e3       	ldi	r27, 0x3F	; 63
    2dee:	8d 8b       	std	Y+21, r24	; 0x15
    2df0:	9e 8b       	std	Y+22, r25	; 0x16
    2df2:	af 8b       	std	Y+23, r26	; 0x17
    2df4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2df6:	6d 89       	ldd	r22, Y+21	; 0x15
    2df8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfe:	2b ea       	ldi	r18, 0xAB	; 171
    2e00:	3a ea       	ldi	r19, 0xAA	; 170
    2e02:	4a ea       	ldi	r20, 0xAA	; 170
    2e04:	50 e4       	ldi	r21, 0x40	; 64
    2e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	89 8b       	std	Y+17, r24	; 0x11
    2e10:	9a 8b       	std	Y+18, r25	; 0x12
    2e12:	ab 8b       	std	Y+19, r26	; 0x13
    2e14:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e16:	69 89       	ldd	r22, Y+17	; 0x11
    2e18:	7a 89       	ldd	r23, Y+18	; 0x12
    2e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	1c f4       	brge	.+6      	; 0x2e34 <LCD_sendCommand+0xc1e>
		__ticks = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	88 8b       	std	Y+16, r24	; 0x10
    2e32:	91 c0       	rjmp	.+290    	; 0x2f56 <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    2e34:	69 89       	ldd	r22, Y+17	; 0x11
    2e36:	7a 89       	ldd	r23, Y+18	; 0x12
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4f e7       	ldi	r20, 0x7F	; 127
    2e42:	53 e4       	ldi	r21, 0x43	; 67
    2e44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	0c f0       	brlt	.+2      	; 0x2e4e <LCD_sendCommand+0xc38>
    2e4c:	7b c0       	rjmp	.+246    	; 0x2f44 <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    2e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e50:	7e 89       	ldd	r23, Y+22	; 0x16
    2e52:	8f 89       	ldd	r24, Y+23	; 0x17
    2e54:	98 8d       	ldd	r25, Y+24	; 0x18
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a e7       	ldi	r20, 0x7A	; 122
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	8c 87       	std	Y+12, r24	; 0x0c
    2e68:	9d 87       	std	Y+13, r25	; 0x0d
    2e6a:	ae 87       	std	Y+14, r26	; 0x0e
    2e6c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e70:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e72:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e74:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a e7       	ldi	r20, 0x7A	; 122
    2e7c:	55 e4       	ldi	r21, 0x45	; 69
    2e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	88 87       	std	Y+8, r24	; 0x08
    2e88:	99 87       	std	Y+9, r25	; 0x09
    2e8a:	aa 87       	std	Y+10, r26	; 0x0a
    2e8c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e8e:	68 85       	ldd	r22, Y+8	; 0x08
    2e90:	79 85       	ldd	r23, Y+9	; 0x09
    2e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e8       	ldi	r20, 0x80	; 128
    2e9c:	5f e3       	ldi	r21, 0x3F	; 63
    2e9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ea2:	88 23       	and	r24, r24
    2ea4:	2c f4       	brge	.+10     	; 0x2eb0 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9f 83       	std	Y+7, r25	; 0x07
    2eac:	8e 83       	std	Y+6, r24	; 0x06
    2eae:	3f c0       	rjmp	.+126    	; 0x2f2e <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    2eb0:	68 85       	ldd	r22, Y+8	; 0x08
    2eb2:	79 85       	ldd	r23, Y+9	; 0x09
    2eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	4c f5       	brge	.+82     	; 0x2f1a <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9f 83       	std	Y+7, r25	; 0x07
    2eee:	8e 83       	std	Y+6, r24	; 0x06
    2ef0:	0f c0       	rjmp	.+30     	; 0x2f10 <LCD_sendCommand+0xcfa>
    2ef2:	80 e9       	ldi	r24, 0x90	; 144
    2ef4:	91 e0       	ldi	r25, 0x01	; 1
    2ef6:	9d 83       	std	Y+5, r25	; 0x05
    2ef8:	8c 83       	std	Y+4, r24	; 0x04
    2efa:	8c 81       	ldd	r24, Y+4	; 0x04
    2efc:	9d 81       	ldd	r25, Y+5	; 0x05
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <LCD_sendCommand+0xce8>
    2f02:	9d 83       	std	Y+5, r25	; 0x05
    2f04:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f06:	8e 81       	ldd	r24, Y+6	; 0x06
    2f08:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	9f 83       	std	Y+7, r25	; 0x07
    2f0e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f10:	8e 81       	ldd	r24, Y+6	; 0x06
    2f12:	9f 81       	ldd	r25, Y+7	; 0x07
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	69 f7       	brne	.-38     	; 0x2ef2 <LCD_sendCommand+0xcdc>
    2f18:	24 c0       	rjmp	.+72     	; 0x2f62 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1a:	68 85       	ldd	r22, Y+8	; 0x08
    2f1c:	79 85       	ldd	r23, Y+9	; 0x09
    2f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9f 83       	std	Y+7, r25	; 0x07
    2f2c:	8e 83       	std	Y+6, r24	; 0x06
    2f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f30:	9f 81       	ldd	r25, Y+7	; 0x07
    2f32:	9b 83       	std	Y+3, r25	; 0x03
    2f34:	8a 83       	std	Y+2, r24	; 0x02
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <LCD_sendCommand+0xd24>
    2f3e:	9b 83       	std	Y+3, r25	; 0x03
    2f40:	8a 83       	std	Y+2, r24	; 0x02
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f44:	69 89       	ldd	r22, Y+17	; 0x11
    2f46:	7a 89       	ldd	r23, Y+18	; 0x12
    2f48:	8b 89       	ldd	r24, Y+19	; 0x13
    2f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	88 8b       	std	Y+16, r24	; 0x10
    2f56:	88 89       	ldd	r24, Y+16	; 0x10
    2f58:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8a 95       	dec	r24
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <LCD_sendCommand+0xd46>
    2f60:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2f62:	cb 56       	subi	r28, 0x6B	; 107
    2f64:	df 4f       	sbci	r29, 0xFF	; 255
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	08 95       	ret

00002f7a <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	c1 58       	subi	r28, 0x81	; 129
    2f88:	d0 40       	sbci	r29, 0x00	; 0
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	fe 01       	movw	r30, r28
    2f96:	ef 57       	subi	r30, 0x7F	; 127
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	61 e0       	ldi	r22, 0x01	; 1
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e3 58       	subi	r30, 0x83	; 131
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 e8       	ldi	r26, 0x80	; 128
    2fb2:	bf e3       	ldi	r27, 0x3F	; 63
    2fb4:	80 83       	st	Z, r24
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	a2 83       	std	Z+2, r26	; 0x02
    2fba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	8e 01       	movw	r16, r28
    2fbe:	07 58       	subi	r16, 0x87	; 135
    2fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e3 58       	subi	r30, 0x83	; 131
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a e7       	ldi	r20, 0x7A	; 122
    2fd6:	55 e4       	ldi	r21, 0x45	; 69
    2fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	80 83       	st	Z, r24
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	a2 83       	std	Z+2, r26	; 0x02
    2fe8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 58       	subi	r30, 0x87	; 135
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	44 f4       	brge	.+16     	; 0x3018 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3008:	fe 01       	movw	r30, r28
    300a:	e9 58       	subi	r30, 0x89	; 137
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	64 c0       	rjmp	.+200    	; 0x30e0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3018:	fe 01       	movw	r30, r28
    301a:	e7 58       	subi	r30, 0x87	; 135
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	3f ef       	ldi	r19, 0xFF	; 255
    302a:	4f e7       	ldi	r20, 0x7F	; 127
    302c:	57 e4       	ldi	r21, 0x47	; 71
    302e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3032:	18 16       	cp	r1, r24
    3034:	0c f0       	brlt	.+2      	; 0x3038 <LCD_displayCharacter+0xbe>
    3036:	43 c0       	rjmp	.+134    	; 0x30be <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	fe 01       	movw	r30, r28
    303a:	e3 58       	subi	r30, 0x83	; 131
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e2       	ldi	r20, 0x20	; 32
    304c:	51 e4       	ldi	r21, 0x41	; 65
    304e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	8e 01       	movw	r16, r28
    3058:	09 58       	subi	r16, 0x89	; 137
    305a:	1f 4f       	sbci	r17, 0xFF	; 255
    305c:	bc 01       	movw	r22, r24
    305e:	cd 01       	movw	r24, r26
    3060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
    306e:	1f c0       	rjmp	.+62     	; 0x30ae <LCD_displayCharacter+0x134>
    3070:	fe 01       	movw	r30, r28
    3072:	eb 58       	subi	r30, 0x8B	; 139
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 e9       	ldi	r24, 0x90	; 144
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    307e:	fe 01       	movw	r30, r28
    3080:	eb 58       	subi	r30, 0x8B	; 139
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_displayCharacter+0x10e>
    308c:	fe 01       	movw	r30, r28
    308e:	eb 58       	subi	r30, 0x8B	; 139
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3096:	de 01       	movw	r26, r28
    3098:	a9 58       	subi	r26, 0x89	; 137
    309a:	bf 4f       	sbci	r27, 0xFF	; 255
    309c:	fe 01       	movw	r30, r28
    309e:	e9 58       	subi	r30, 0x89	; 137
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	9c 93       	st	X, r25
    30ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	fe 01       	movw	r30, r28
    30b0:	e9 58       	subi	r30, 0x89	; 137
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	d1 f6       	brne	.-76     	; 0x3070 <LCD_displayCharacter+0xf6>
    30bc:	27 c0       	rjmp	.+78     	; 0x310c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	8e 01       	movw	r16, r28
    30c0:	09 58       	subi	r16, 0x89	; 137
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	fe 01       	movw	r30, r28
    30c6:	e7 58       	subi	r30, 0x87	; 135
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	f8 01       	movw	r30, r16
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
    30e0:	de 01       	movw	r26, r28
    30e2:	ad 58       	subi	r26, 0x8D	; 141
    30e4:	bf 4f       	sbci	r27, 0xFF	; 255
    30e6:	fe 01       	movw	r30, r28
    30e8:	e9 58       	subi	r30, 0x89	; 137
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	8d 93       	st	X+, r24
    30f2:	9c 93       	st	X, r25
    30f4:	fe 01       	movw	r30, r28
    30f6:	ed 58       	subi	r30, 0x8D	; 141
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LCD_displayCharacter+0x184>
    3102:	fe 01       	movw	r30, r28
    3104:	ed 58       	subi	r30, 0x8D	; 141
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	62 e0       	ldi	r22, 0x02	; 2
    3110:	41 e0       	ldi	r20, 0x01	; 1
    3112:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    3116:	fe 01       	movw	r30, r28
    3118:	e1 59       	subi	r30, 0x91	; 145
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e8       	ldi	r26, 0x80	; 128
    3122:	bf e3       	ldi	r27, 0x3F	; 63
    3124:	80 83       	st	Z, r24
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	a2 83       	std	Z+2, r26	; 0x02
    312a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	8e 01       	movw	r16, r28
    312e:	05 59       	subi	r16, 0x95	; 149
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
    3132:	fe 01       	movw	r30, r28
    3134:	e1 59       	subi	r30, 0x91	; 145
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a e7       	ldi	r20, 0x7A	; 122
    3146:	55 e4       	ldi	r21, 0x45	; 69
    3148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	f8 01       	movw	r30, r16
    3152:	80 83       	st	Z, r24
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    315a:	fe 01       	movw	r30, r28
    315c:	e5 59       	subi	r30, 0x95	; 149
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	44 f4       	brge	.+16     	; 0x3188 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3178:	fe 01       	movw	r30, r28
    317a:	e7 59       	subi	r30, 0x97	; 151
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	64 c0       	rjmp	.+200    	; 0x3250 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3188:	fe 01       	movw	r30, r28
    318a:	e5 59       	subi	r30, 0x95	; 149
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	0c f0       	brlt	.+2      	; 0x31a8 <LCD_displayCharacter+0x22e>
    31a6:	43 c0       	rjmp	.+134    	; 0x322e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	fe 01       	movw	r30, r28
    31aa:	e1 59       	subi	r30, 0x91	; 145
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	8e 01       	movw	r16, r28
    31c8:	07 59       	subi	r16, 0x97	; 151
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	f8 01       	movw	r30, r16
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	1f c0       	rjmp	.+62     	; 0x321e <LCD_displayCharacter+0x2a4>
    31e0:	fe 01       	movw	r30, r28
    31e2:	e9 59       	subi	r30, 0x99	; 153
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 e9       	ldi	r24, 0x90	; 144
    31e8:	91 e0       	ldi	r25, 0x01	; 1
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	fe 01       	movw	r30, r28
    31f0:	e9 59       	subi	r30, 0x99	; 153
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_displayCharacter+0x27e>
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 59       	subi	r30, 0x99	; 153
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	de 01       	movw	r26, r28
    3208:	a7 59       	subi	r26, 0x97	; 151
    320a:	bf 4f       	sbci	r27, 0xFF	; 255
    320c:	fe 01       	movw	r30, r28
    320e:	e7 59       	subi	r30, 0x97	; 151
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	11 96       	adiw	r26, 0x01	; 1
    321a:	9c 93       	st	X, r25
    321c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	fe 01       	movw	r30, r28
    3220:	e7 59       	subi	r30, 0x97	; 151
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	d1 f6       	brne	.-76     	; 0x31e0 <LCD_displayCharacter+0x266>
    322c:	27 c0       	rjmp	.+78     	; 0x327c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	8e 01       	movw	r16, r28
    3230:	07 59       	subi	r16, 0x97	; 151
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	e5 59       	subi	r30, 0x95	; 149
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	60 81       	ld	r22, Z
    323c:	71 81       	ldd	r23, Z+1	; 0x01
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	de 01       	movw	r26, r28
    3252:	ab 59       	subi	r26, 0x9B	; 155
    3254:	bf 4f       	sbci	r27, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	e7 59       	subi	r30, 0x97	; 151
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	8d 93       	st	X+, r24
    3262:	9c 93       	st	X, r25
    3264:	fe 01       	movw	r30, r28
    3266:	eb 59       	subi	r30, 0x9B	; 155
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <LCD_displayCharacter+0x2f4>
    3272:	fe 01       	movw	r30, r28
    3274:	eb 59       	subi	r30, 0x9B	; 155
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    327c:	fe 01       	movw	r30, r28
    327e:	ef 57       	subi	r30, 0x7F	; 127
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	82 95       	swap	r24
    3286:	8f 70       	andi	r24, 0x0F	; 15
    3288:	98 2f       	mov	r25, r24
    328a:	91 70       	andi	r25, 0x01	; 1
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	63 e0       	ldi	r22, 0x03	; 3
    3290:	49 2f       	mov	r20, r25
    3292:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    3296:	fe 01       	movw	r30, r28
    3298:	ef 57       	subi	r30, 0x7F	; 127
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	82 95       	swap	r24
    32a0:	86 95       	lsr	r24
    32a2:	87 70       	andi	r24, 0x07	; 7
    32a4:	98 2f       	mov	r25, r24
    32a6:	91 70       	andi	r25, 0x01	; 1
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	64 e0       	ldi	r22, 0x04	; 4
    32ac:	49 2f       	mov	r20, r25
    32ae:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    32b2:	fe 01       	movw	r30, r28
    32b4:	ef 57       	subi	r30, 0x7F	; 127
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	82 95       	swap	r24
    32bc:	86 95       	lsr	r24
    32be:	86 95       	lsr	r24
    32c0:	83 70       	andi	r24, 0x03	; 3
    32c2:	98 2f       	mov	r25, r24
    32c4:	91 70       	andi	r25, 0x01	; 1
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	65 e0       	ldi	r22, 0x05	; 5
    32ca:	49 2f       	mov	r20, r25
    32cc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    32d0:	fe 01       	movw	r30, r28
    32d2:	ef 57       	subi	r30, 0x7F	; 127
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	98 2f       	mov	r25, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	99 27       	eor	r25, r25
    32de:	99 1f       	adc	r25, r25
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	66 e0       	ldi	r22, 0x06	; 6
    32e4:	49 2f       	mov	r20, r25
    32e6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    32ea:	fe 01       	movw	r30, r28
    32ec:	ef 59       	subi	r30, 0x9F	; 159
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	a0 e8       	ldi	r26, 0x80	; 128
    32f6:	bf e3       	ldi	r27, 0x3F	; 63
    32f8:	80 83       	st	Z, r24
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	a2 83       	std	Z+2, r26	; 0x02
    32fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	8e 01       	movw	r16, r28
    3302:	03 5a       	subi	r16, 0xA3	; 163
    3304:	1f 4f       	sbci	r17, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	ef 59       	subi	r30, 0x9F	; 159
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	60 81       	ld	r22, Z
    330e:	71 81       	ldd	r23, Z+1	; 0x01
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	4a e7       	ldi	r20, 0x7A	; 122
    331a:	55 e4       	ldi	r21, 0x45	; 69
    331c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	f8 01       	movw	r30, r16
    3326:	80 83       	st	Z, r24
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	a2 83       	std	Z+2, r26	; 0x02
    332c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    332e:	fe 01       	movw	r30, r28
    3330:	e3 5a       	subi	r30, 0xA3	; 163
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	44 f4       	brge	.+16     	; 0x335c <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    334c:	fe 01       	movw	r30, r28
    334e:	e5 5a       	subi	r30, 0xA5	; 165
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
    335a:	64 c0       	rjmp	.+200    	; 0x3424 <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    335c:	fe 01       	movw	r30, r28
    335e:	e3 5a       	subi	r30, 0xA3	; 163
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	60 81       	ld	r22, Z
    3364:	71 81       	ldd	r23, Z+1	; 0x01
    3366:	82 81       	ldd	r24, Z+2	; 0x02
    3368:	93 81       	ldd	r25, Z+3	; 0x03
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	3f ef       	ldi	r19, 0xFF	; 255
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	57 e4       	ldi	r21, 0x47	; 71
    3372:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3376:	18 16       	cp	r1, r24
    3378:	0c f0       	brlt	.+2      	; 0x337c <LCD_displayCharacter+0x402>
    337a:	43 c0       	rjmp	.+134    	; 0x3402 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337c:	fe 01       	movw	r30, r28
    337e:	ef 59       	subi	r30, 0x9F	; 159
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e2       	ldi	r20, 0x20	; 32
    3390:	51 e4       	ldi	r21, 0x41	; 65
    3392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8e 01       	movw	r16, r28
    339c:	05 5a       	subi	r16, 0xA5	; 165
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	f8 01       	movw	r30, r16
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	1f c0       	rjmp	.+62     	; 0x33f2 <LCD_displayCharacter+0x478>
    33b4:	fe 01       	movw	r30, r28
    33b6:	e7 5a       	subi	r30, 0xA7	; 167
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 e9       	ldi	r24, 0x90	; 144
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	80 83       	st	Z, r24
    33c2:	fe 01       	movw	r30, r28
    33c4:	e7 5a       	subi	r30, 0xA7	; 167
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <LCD_displayCharacter+0x452>
    33d0:	fe 01       	movw	r30, r28
    33d2:	e7 5a       	subi	r30, 0xA7	; 167
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33da:	de 01       	movw	r26, r28
    33dc:	a5 5a       	subi	r26, 0xA5	; 165
    33de:	bf 4f       	sbci	r27, 0xFF	; 255
    33e0:	fe 01       	movw	r30, r28
    33e2:	e5 5a       	subi	r30, 0xA5	; 165
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	11 96       	adiw	r26, 0x01	; 1
    33ee:	9c 93       	st	X, r25
    33f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f2:	fe 01       	movw	r30, r28
    33f4:	e5 5a       	subi	r30, 0xA5	; 165
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	80 81       	ld	r24, Z
    33fa:	91 81       	ldd	r25, Z+1	; 0x01
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	d1 f6       	brne	.-76     	; 0x33b4 <LCD_displayCharacter+0x43a>
    3400:	27 c0       	rjmp	.+78     	; 0x3450 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	8e 01       	movw	r16, r28
    3404:	05 5a       	subi	r16, 0xA5	; 165
    3406:	1f 4f       	sbci	r17, 0xFF	; 255
    3408:	fe 01       	movw	r30, r28
    340a:	e3 5a       	subi	r30, 0xA3	; 163
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	60 81       	ld	r22, Z
    3410:	71 81       	ldd	r23, Z+1	; 0x01
    3412:	82 81       	ldd	r24, Z+2	; 0x02
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	f8 01       	movw	r30, r16
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	80 83       	st	Z, r24
    3424:	de 01       	movw	r26, r28
    3426:	a9 5a       	subi	r26, 0xA9	; 169
    3428:	bf 4f       	sbci	r27, 0xFF	; 255
    342a:	fe 01       	movw	r30, r28
    342c:	e5 5a       	subi	r30, 0xA5	; 165
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	8d 93       	st	X+, r24
    3436:	9c 93       	st	X, r25
    3438:	fe 01       	movw	r30, r28
    343a:	e9 5a       	subi	r30, 0xA9	; 169
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCD_displayCharacter+0x4c8>
    3446:	fe 01       	movw	r30, r28
    3448:	e9 5a       	subi	r30, 0xA9	; 169
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	62 e0       	ldi	r22, 0x02	; 2
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    345a:	fe 01       	movw	r30, r28
    345c:	ed 5a       	subi	r30, 0xAD	; 173
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e8       	ldi	r26, 0x80	; 128
    3466:	bf e3       	ldi	r27, 0x3F	; 63
    3468:	80 83       	st	Z, r24
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	a2 83       	std	Z+2, r26	; 0x02
    346e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3470:	8e 01       	movw	r16, r28
    3472:	01 5b       	subi	r16, 0xB1	; 177
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	fe 01       	movw	r30, r28
    3478:	ed 5a       	subi	r30, 0xAD	; 173
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	2b ea       	ldi	r18, 0xAB	; 171
    3486:	3a ea       	ldi	r19, 0xAA	; 170
    3488:	4a ea       	ldi	r20, 0xAA	; 170
    348a:	50 e4       	ldi	r21, 0x40	; 64
    348c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	f8 01       	movw	r30, r16
    3496:	80 83       	st	Z, r24
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	a2 83       	std	Z+2, r26	; 0x02
    349c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    349e:	fe 01       	movw	r30, r28
    34a0:	e1 5b       	subi	r30, 0xB1	; 177
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e8       	ldi	r20, 0x80	; 128
    34b2:	5f e3       	ldi	r21, 0x3F	; 63
    34b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34b8:	88 23       	and	r24, r24
    34ba:	34 f4       	brge	.+12     	; 0x34c8 <LCD_displayCharacter+0x54e>
		__ticks = 1;
    34bc:	fe 01       	movw	r30, r28
    34be:	e2 5b       	subi	r30, 0xB2	; 178
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	80 83       	st	Z, r24
    34c6:	e0 c0       	rjmp	.+448    	; 0x3688 <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    34c8:	fe 01       	movw	r30, r28
    34ca:	e1 5b       	subi	r30, 0xB1	; 177
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	60 81       	ld	r22, Z
    34d0:	71 81       	ldd	r23, Z+1	; 0x01
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	53 e4       	ldi	r21, 0x43	; 67
    34de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	0c f0       	brlt	.+2      	; 0x34e8 <LCD_displayCharacter+0x56e>
    34e6:	c0 c0       	rjmp	.+384    	; 0x3668 <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    34e8:	fe 01       	movw	r30, r28
    34ea:	ed 5a       	subi	r30, 0xAD	; 173
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a e7       	ldi	r20, 0x7A	; 122
    34fc:	54 e4       	ldi	r21, 0x44	; 68
    34fe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	fe 01       	movw	r30, r28
    3508:	e6 5b       	subi	r30, 0xB6	; 182
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 83       	st	Z, r24
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	a2 83       	std	Z+2, r26	; 0x02
    3512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3514:	8e 01       	movw	r16, r28
    3516:	0a 5b       	subi	r16, 0xBA	; 186
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	fe 01       	movw	r30, r28
    351c:	e6 5b       	subi	r30, 0xB6	; 182
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	60 81       	ld	r22, Z
    3522:	71 81       	ldd	r23, Z+1	; 0x01
    3524:	82 81       	ldd	r24, Z+2	; 0x02
    3526:	93 81       	ldd	r25, Z+3	; 0x03
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a e7       	ldi	r20, 0x7A	; 122
    352e:	55 e4       	ldi	r21, 0x45	; 69
    3530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	f8 01       	movw	r30, r16
    353a:	80 83       	st	Z, r24
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	a2 83       	std	Z+2, r26	; 0x02
    3540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3542:	fe 01       	movw	r30, r28
    3544:	ea 5b       	subi	r30, 0xBA	; 186
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	60 81       	ld	r22, Z
    354a:	71 81       	ldd	r23, Z+1	; 0x01
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	44 f4       	brge	.+16     	; 0x3570 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    3560:	fe 01       	movw	r30, r28
    3562:	ec 5b       	subi	r30, 0xBC	; 188
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	80 83       	st	Z, r24
    356e:	64 c0       	rjmp	.+200    	; 0x3638 <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    3570:	fe 01       	movw	r30, r28
    3572:	ea 5b       	subi	r30, 0xBA	; 186
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	60 81       	ld	r22, Z
    3578:	71 81       	ldd	r23, Z+1	; 0x01
    357a:	82 81       	ldd	r24, Z+2	; 0x02
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	3f ef       	ldi	r19, 0xFF	; 255
    3582:	4f e7       	ldi	r20, 0x7F	; 127
    3584:	57 e4       	ldi	r21, 0x47	; 71
    3586:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    358a:	18 16       	cp	r1, r24
    358c:	0c f0       	brlt	.+2      	; 0x3590 <LCD_displayCharacter+0x616>
    358e:	43 c0       	rjmp	.+134    	; 0x3616 <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	fe 01       	movw	r30, r28
    3592:	e6 5b       	subi	r30, 0xB6	; 182
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8e 01       	movw	r16, r28
    35b0:	0c 5b       	subi	r16, 0xBC	; 188
    35b2:	1f 4f       	sbci	r17, 0xFF	; 255
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	f8 01       	movw	r30, r16
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	1f c0       	rjmp	.+62     	; 0x3606 <LCD_displayCharacter+0x68c>
    35c8:	fe 01       	movw	r30, r28
    35ca:	ee 5b       	subi	r30, 0xBE	; 190
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 e9       	ldi	r24, 0x90	; 144
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	80 83       	st	Z, r24
    35d6:	fe 01       	movw	r30, r28
    35d8:	ee 5b       	subi	r30, 0xBE	; 190
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_displayCharacter+0x666>
    35e4:	fe 01       	movw	r30, r28
    35e6:	ee 5b       	subi	r30, 0xBE	; 190
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	de 01       	movw	r26, r28
    35f0:	ac 5b       	subi	r26, 0xBC	; 188
    35f2:	bf 4f       	sbci	r27, 0xFF	; 255
    35f4:	fe 01       	movw	r30, r28
    35f6:	ec 5b       	subi	r30, 0xBC	; 188
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	11 96       	adiw	r26, 0x01	; 1
    3602:	9c 93       	st	X, r25
    3604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3606:	fe 01       	movw	r30, r28
    3608:	ec 5b       	subi	r30, 0xBC	; 188
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	d1 f6       	brne	.-76     	; 0x35c8 <LCD_displayCharacter+0x64e>
    3614:	42 c0       	rjmp	.+132    	; 0x369a <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3616:	8e 01       	movw	r16, r28
    3618:	0c 5b       	subi	r16, 0xBC	; 188
    361a:	1f 4f       	sbci	r17, 0xFF	; 255
    361c:	fe 01       	movw	r30, r28
    361e:	ea 5b       	subi	r30, 0xBA	; 186
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	f8 01       	movw	r30, r16
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	de 01       	movw	r26, r28
    363a:	a0 5c       	subi	r26, 0xC0	; 192
    363c:	bf 4f       	sbci	r27, 0xFF	; 255
    363e:	fe 01       	movw	r30, r28
    3640:	ec 5b       	subi	r30, 0xBC	; 188
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 81       	ld	r24, Z
    3646:	91 81       	ldd	r25, Z+1	; 0x01
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	9c 93       	st	X, r25
    364c:	8e 93       	st	-X, r24
    364e:	fe 01       	movw	r30, r28
    3650:	e0 5c       	subi	r30, 0xC0	; 192
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	f1 f7       	brne	.-4      	; 0x3658 <LCD_displayCharacter+0x6de>
    365c:	fe 01       	movw	r30, r28
    365e:	e0 5c       	subi	r30, 0xC0	; 192
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	80 83       	st	Z, r24
    3666:	19 c0       	rjmp	.+50     	; 0x369a <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3668:	8e 01       	movw	r16, r28
    366a:	02 5b       	subi	r16, 0xB2	; 178
    366c:	1f 4f       	sbci	r17, 0xFF	; 255
    366e:	fe 01       	movw	r30, r28
    3670:	e1 5b       	subi	r30, 0xB1	; 177
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	82 81       	ldd	r24, Z+2	; 0x02
    367a:	93 81       	ldd	r25, Z+3	; 0x03
    367c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	f8 01       	movw	r30, r16
    3686:	80 83       	st	Z, r24
    3688:	fe 01       	movw	r30, r28
    368a:	e2 5b       	subi	r30, 0xB2	; 178
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 81       	ld	r24, Z
    3690:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3692:	8f ad       	ldd	r24, Y+63	; 0x3f
    3694:	8a 95       	dec	r24
    3696:	f1 f7       	brne	.-4      	; 0x3694 <LCD_displayCharacter+0x71a>
    3698:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	62 e0       	ldi	r22, 0x02	; 2
    369e:	41 e0       	ldi	r20, 0x01	; 1
    36a0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e8       	ldi	r26, 0x80	; 128
    36aa:	bf e3       	ldi	r27, 0x3F	; 63
    36ac:	8b af       	std	Y+59, r24	; 0x3b
    36ae:	9c af       	std	Y+60, r25	; 0x3c
    36b0:	ad af       	std	Y+61, r26	; 0x3d
    36b2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36b4:	6b ad       	ldd	r22, Y+59	; 0x3b
    36b6:	7c ad       	ldd	r23, Y+60	; 0x3c
    36b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    36bc:	2b ea       	ldi	r18, 0xAB	; 171
    36be:	3a ea       	ldi	r19, 0xAA	; 170
    36c0:	4a ea       	ldi	r20, 0xAA	; 170
    36c2:	50 e4       	ldi	r21, 0x40	; 64
    36c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	8f ab       	std	Y+55, r24	; 0x37
    36ce:	98 af       	std	Y+56, r25	; 0x38
    36d0:	a9 af       	std	Y+57, r26	; 0x39
    36d2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    36d4:	6f a9       	ldd	r22, Y+55	; 0x37
    36d6:	78 ad       	ldd	r23, Y+56	; 0x38
    36d8:	89 ad       	ldd	r24, Y+57	; 0x39
    36da:	9a ad       	ldd	r25, Y+58	; 0x3a
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e8       	ldi	r20, 0x80	; 128
    36e2:	5f e3       	ldi	r21, 0x3F	; 63
    36e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	1c f4       	brge	.+6      	; 0x36f2 <LCD_displayCharacter+0x778>
		__ticks = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	8e ab       	std	Y+54, r24	; 0x36
    36f0:	91 c0       	rjmp	.+290    	; 0x3814 <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    36f2:	6f a9       	ldd	r22, Y+55	; 0x37
    36f4:	78 ad       	ldd	r23, Y+56	; 0x38
    36f6:	89 ad       	ldd	r24, Y+57	; 0x39
    36f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	53 e4       	ldi	r21, 0x43	; 67
    3702:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	0c f0       	brlt	.+2      	; 0x370c <LCD_displayCharacter+0x792>
    370a:	7b c0       	rjmp	.+246    	; 0x3802 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    370c:	6b ad       	ldd	r22, Y+59	; 0x3b
    370e:	7c ad       	ldd	r23, Y+60	; 0x3c
    3710:	8d ad       	ldd	r24, Y+61	; 0x3d
    3712:	9e ad       	ldd	r25, Y+62	; 0x3e
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	4a e7       	ldi	r20, 0x7A	; 122
    371a:	54 e4       	ldi	r21, 0x44	; 68
    371c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	8a ab       	std	Y+50, r24	; 0x32
    3726:	9b ab       	std	Y+51, r25	; 0x33
    3728:	ac ab       	std	Y+52, r26	; 0x34
    372a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6a a9       	ldd	r22, Y+50	; 0x32
    372e:	7b a9       	ldd	r23, Y+51	; 0x33
    3730:	8c a9       	ldd	r24, Y+52	; 0x34
    3732:	9d a9       	ldd	r25, Y+53	; 0x35
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	55 e4       	ldi	r21, 0x45	; 69
    373c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8e a7       	std	Y+46, r24	; 0x2e
    3746:	9f a7       	std	Y+47, r25	; 0x2f
    3748:	a8 ab       	std	Y+48, r26	; 0x30
    374a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    374c:	6e a5       	ldd	r22, Y+46	; 0x2e
    374e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3750:	88 a9       	ldd	r24, Y+48	; 0x30
    3752:	99 a9       	ldd	r25, Y+49	; 0x31
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9d a7       	std	Y+45, r25	; 0x2d
    376a:	8c a7       	std	Y+44, r24	; 0x2c
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    376e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3770:	7f a5       	ldd	r23, Y+47	; 0x2f
    3772:	88 a9       	ldd	r24, Y+48	; 0x30
    3774:	99 a9       	ldd	r25, Y+49	; 0x31
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6a a9       	ldd	r22, Y+50	; 0x32
    3788:	7b a9       	ldd	r23, Y+51	; 0x33
    378a:	8c a9       	ldd	r24, Y+52	; 0x34
    378c:	9d a9       	ldd	r25, Y+53	; 0x35
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9d a7       	std	Y+45, r25	; 0x2d
    37ac:	8c a7       	std	Y+44, r24	; 0x2c
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <LCD_displayCharacter+0x854>
    37b0:	80 e9       	ldi	r24, 0x90	; 144
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	9b a7       	std	Y+43, r25	; 0x2b
    37b6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37b8:	8a a5       	ldd	r24, Y+42	; 0x2a
    37ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <LCD_displayCharacter+0x842>
    37c0:	9b a7       	std	Y+43, r25	; 0x2b
    37c2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    37c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9d a7       	std	Y+45, r25	; 0x2d
    37cc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    37d0:	9d a5       	ldd	r25, Y+45	; 0x2d
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <LCD_displayCharacter+0x836>
    37d6:	24 c0       	rjmp	.+72     	; 0x3820 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    37da:	7f a5       	ldd	r23, Y+47	; 0x2f
    37dc:	88 a9       	ldd	r24, Y+48	; 0x30
    37de:	99 a9       	ldd	r25, Y+49	; 0x31
    37e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9d a7       	std	Y+45, r25	; 0x2d
    37ea:	8c a7       	std	Y+44, r24	; 0x2c
    37ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    37ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    37f0:	99 a7       	std	Y+41, r25	; 0x29
    37f2:	88 a7       	std	Y+40, r24	; 0x28
    37f4:	88 a5       	ldd	r24, Y+40	; 0x28
    37f6:	99 a5       	ldd	r25, Y+41	; 0x29
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_displayCharacter+0x87e>
    37fc:	99 a7       	std	Y+41, r25	; 0x29
    37fe:	88 a7       	std	Y+40, r24	; 0x28
    3800:	0f c0       	rjmp	.+30     	; 0x3820 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3802:	6f a9       	ldd	r22, Y+55	; 0x37
    3804:	78 ad       	ldd	r23, Y+56	; 0x38
    3806:	89 ad       	ldd	r24, Y+57	; 0x39
    3808:	9a ad       	ldd	r25, Y+58	; 0x3a
    380a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	8e ab       	std	Y+54, r24	; 0x36
    3814:	8e a9       	ldd	r24, Y+54	; 0x36
    3816:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3818:	8f a1       	ldd	r24, Y+39	; 0x27
    381a:	8a 95       	dec	r24
    381c:	f1 f7       	brne	.-4      	; 0x381a <LCD_displayCharacter+0x8a0>
    381e:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    3820:	fe 01       	movw	r30, r28
    3822:	ef 57       	subi	r30, 0x7F	; 127
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	98 2f       	mov	r25, r24
    382a:	91 70       	andi	r25, 0x01	; 1
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	63 e0       	ldi	r22, 0x03	; 3
    3830:	49 2f       	mov	r20, r25
    3832:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    3836:	fe 01       	movw	r30, r28
    3838:	ef 57       	subi	r30, 0x7F	; 127
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	86 95       	lsr	r24
    3840:	98 2f       	mov	r25, r24
    3842:	91 70       	andi	r25, 0x01	; 1
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	64 e0       	ldi	r22, 0x04	; 4
    3848:	49 2f       	mov	r20, r25
    384a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    384e:	fe 01       	movw	r30, r28
    3850:	ef 57       	subi	r30, 0x7F	; 127
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	86 95       	lsr	r24
    3858:	86 95       	lsr	r24
    385a:	98 2f       	mov	r25, r24
    385c:	91 70       	andi	r25, 0x01	; 1
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	65 e0       	ldi	r22, 0x05	; 5
    3862:	49 2f       	mov	r20, r25
    3864:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    3868:	fe 01       	movw	r30, r28
    386a:	ef 57       	subi	r30, 0x7F	; 127
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	86 95       	lsr	r24
    3872:	86 95       	lsr	r24
    3874:	86 95       	lsr	r24
    3876:	98 2f       	mov	r25, r24
    3878:	91 70       	andi	r25, 0x01	; 1
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	66 e0       	ldi	r22, 0x06	; 6
    387e:	49 2f       	mov	r20, r25
    3880:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a0 e8       	ldi	r26, 0x80	; 128
    388a:	bf e3       	ldi	r27, 0x3F	; 63
    388c:	8b a3       	std	Y+35, r24	; 0x23
    388e:	9c a3       	std	Y+36, r25	; 0x24
    3890:	ad a3       	std	Y+37, r26	; 0x25
    3892:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	6b a1       	ldd	r22, Y+35	; 0x23
    3896:	7c a1       	ldd	r23, Y+36	; 0x24
    3898:	8d a1       	ldd	r24, Y+37	; 0x25
    389a:	9e a1       	ldd	r25, Y+38	; 0x26
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4a e7       	ldi	r20, 0x7A	; 122
    38a2:	55 e4       	ldi	r21, 0x45	; 69
    38a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	8f 8f       	std	Y+31, r24	; 0x1f
    38ae:	98 a3       	std	Y+32, r25	; 0x20
    38b0:	a9 a3       	std	Y+33, r26	; 0x21
    38b2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    38b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38b6:	78 a1       	ldd	r23, Y+32	; 0x20
    38b8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ba:	9a a1       	ldd	r25, Y+34	; 0x22
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	2c f4       	brge	.+10     	; 0x38d6 <LCD_displayCharacter+0x95c>
		__ticks = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9e 8f       	std	Y+30, r25	; 0x1e
    38d2:	8d 8f       	std	Y+29, r24	; 0x1d
    38d4:	3f c0       	rjmp	.+126    	; 0x3954 <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    38d6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38d8:	78 a1       	ldd	r23, Y+32	; 0x20
    38da:	89 a1       	ldd	r24, Y+33	; 0x21
    38dc:	9a a1       	ldd	r25, Y+34	; 0x22
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	57 e4       	ldi	r21, 0x47	; 71
    38e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	4c f5       	brge	.+82     	; 0x3940 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	6b a1       	ldd	r22, Y+35	; 0x23
    38f0:	7c a1       	ldd	r23, Y+36	; 0x24
    38f2:	8d a1       	ldd	r24, Y+37	; 0x25
    38f4:	9e a1       	ldd	r25, Y+38	; 0x26
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9e 8f       	std	Y+30, r25	; 0x1e
    3914:	8d 8f       	std	Y+29, r24	; 0x1d
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <LCD_displayCharacter+0x9bc>
    3918:	80 e9       	ldi	r24, 0x90	; 144
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	9c 8f       	std	Y+28, r25	; 0x1c
    391e:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <LCD_displayCharacter+0x9aa>
    3928:	9c 8f       	std	Y+28, r25	; 0x1c
    392a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	9e 8f       	std	Y+30, r25	; 0x1e
    3934:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3936:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3938:	9e 8d       	ldd	r25, Y+30	; 0x1e
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	69 f7       	brne	.-38     	; 0x3918 <LCD_displayCharacter+0x99e>
    393e:	14 c0       	rjmp	.+40     	; 0x3968 <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3940:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3942:	78 a1       	ldd	r23, Y+32	; 0x20
    3944:	89 a1       	ldd	r24, Y+33	; 0x21
    3946:	9a a1       	ldd	r25, Y+34	; 0x22
    3948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9e 8f       	std	Y+30, r25	; 0x1e
    3952:	8d 8f       	std	Y+29, r24	; 0x1d
    3954:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3956:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3958:	9a 8f       	std	Y+26, r25	; 0x1a
    395a:	89 8f       	std	Y+25, r24	; 0x19
    395c:	89 8d       	ldd	r24, Y+25	; 0x19
    395e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <LCD_displayCharacter+0x9e6>
    3964:	9a 8f       	std	Y+26, r25	; 0x1a
    3966:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	62 e0       	ldi	r22, 0x02	; 2
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	a0 e8       	ldi	r26, 0x80	; 128
    3978:	bf e3       	ldi	r27, 0x3F	; 63
    397a:	8d 8b       	std	Y+21, r24	; 0x15
    397c:	9e 8b       	std	Y+22, r25	; 0x16
    397e:	af 8b       	std	Y+23, r26	; 0x17
    3980:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3982:	6d 89       	ldd	r22, Y+21	; 0x15
    3984:	7e 89       	ldd	r23, Y+22	; 0x16
    3986:	8f 89       	ldd	r24, Y+23	; 0x17
    3988:	98 8d       	ldd	r25, Y+24	; 0x18
    398a:	2b ea       	ldi	r18, 0xAB	; 171
    398c:	3a ea       	ldi	r19, 0xAA	; 170
    398e:	4a ea       	ldi	r20, 0xAA	; 170
    3990:	50 e4       	ldi	r21, 0x40	; 64
    3992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	89 8b       	std	Y+17, r24	; 0x11
    399c:	9a 8b       	std	Y+18, r25	; 0x12
    399e:	ab 8b       	std	Y+19, r26	; 0x13
    39a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39a2:	69 89       	ldd	r22, Y+17	; 0x11
    39a4:	7a 89       	ldd	r23, Y+18	; 0x12
    39a6:	8b 89       	ldd	r24, Y+19	; 0x13
    39a8:	9c 89       	ldd	r25, Y+20	; 0x14
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e8       	ldi	r20, 0x80	; 128
    39b0:	5f e3       	ldi	r21, 0x3F	; 63
    39b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    39b6:	88 23       	and	r24, r24
    39b8:	1c f4       	brge	.+6      	; 0x39c0 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	88 8b       	std	Y+16, r24	; 0x10
    39be:	91 c0       	rjmp	.+290    	; 0x3ae2 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    39c0:	69 89       	ldd	r22, Y+17	; 0x11
    39c2:	7a 89       	ldd	r23, Y+18	; 0x12
    39c4:	8b 89       	ldd	r24, Y+19	; 0x13
    39c6:	9c 89       	ldd	r25, Y+20	; 0x14
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	4f e7       	ldi	r20, 0x7F	; 127
    39ce:	53 e4       	ldi	r21, 0x43	; 67
    39d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39d4:	18 16       	cp	r1, r24
    39d6:	0c f0       	brlt	.+2      	; 0x39da <LCD_displayCharacter+0xa60>
    39d8:	7b c0       	rjmp	.+246    	; 0x3ad0 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    39da:	6d 89       	ldd	r22, Y+21	; 0x15
    39dc:	7e 89       	ldd	r23, Y+22	; 0x16
    39de:	8f 89       	ldd	r24, Y+23	; 0x17
    39e0:	98 8d       	ldd	r25, Y+24	; 0x18
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	4a e7       	ldi	r20, 0x7A	; 122
    39e8:	54 e4       	ldi	r21, 0x44	; 68
    39ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	8c 87       	std	Y+12, r24	; 0x0c
    39f4:	9d 87       	std	Y+13, r25	; 0x0d
    39f6:	ae 87       	std	Y+14, r26	; 0x0e
    39f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    39fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    39fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a00:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a e7       	ldi	r20, 0x7A	; 122
    3a08:	55 e4       	ldi	r21, 0x45	; 69
    3a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	88 87       	std	Y+8, r24	; 0x08
    3a14:	99 87       	std	Y+9, r25	; 0x09
    3a16:	aa 87       	std	Y+10, r26	; 0x0a
    3a18:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a1a:	68 85       	ldd	r22, Y+8	; 0x08
    3a1c:	79 85       	ldd	r23, Y+9	; 0x09
    3a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e8       	ldi	r20, 0x80	; 128
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	2c f4       	brge	.+10     	; 0x3a3c <LCD_displayCharacter+0xac2>
		__ticks = 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9f 83       	std	Y+7, r25	; 0x07
    3a38:	8e 83       	std	Y+6, r24	; 0x06
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    3a3c:	68 85       	ldd	r22, Y+8	; 0x08
    3a3e:	79 85       	ldd	r23, Y+9	; 0x09
    3a40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a42:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	57 e4       	ldi	r21, 0x47	; 71
    3a4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a50:	18 16       	cp	r1, r24
    3a52:	4c f5       	brge	.+82     	; 0x3aa6 <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a54:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a56:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a58:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9f 83       	std	Y+7, r25	; 0x07
    3a7a:	8e 83       	std	Y+6, r24	; 0x06
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <LCD_displayCharacter+0xb22>
    3a7e:	80 e9       	ldi	r24, 0x90	; 144
    3a80:	91 e0       	ldi	r25, 0x01	; 1
    3a82:	9d 83       	std	Y+5, r25	; 0x05
    3a84:	8c 83       	std	Y+4, r24	; 0x04
    3a86:	8c 81       	ldd	r24, Y+4	; 0x04
    3a88:	9d 81       	ldd	r25, Y+5	; 0x05
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <LCD_displayCharacter+0xb10>
    3a8e:	9d 83       	std	Y+5, r25	; 0x05
    3a90:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a92:	8e 81       	ldd	r24, Y+6	; 0x06
    3a94:	9f 81       	ldd	r25, Y+7	; 0x07
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	9f 83       	std	Y+7, r25	; 0x07
    3a9a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	69 f7       	brne	.-38     	; 0x3a7e <LCD_displayCharacter+0xb04>
    3aa4:	24 c0       	rjmp	.+72     	; 0x3aee <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa6:	68 85       	ldd	r22, Y+8	; 0x08
    3aa8:	79 85       	ldd	r23, Y+9	; 0x09
    3aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aac:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9f 83       	std	Y+7, r25	; 0x07
    3ab8:	8e 83       	std	Y+6, r24	; 0x06
    3aba:	8e 81       	ldd	r24, Y+6	; 0x06
    3abc:	9f 81       	ldd	r25, Y+7	; 0x07
    3abe:	9b 83       	std	Y+3, r25	; 0x03
    3ac0:	8a 83       	std	Y+2, r24	; 0x02
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <LCD_displayCharacter+0xb4c>
    3aca:	9b 83       	std	Y+3, r25	; 0x03
    3acc:	8a 83       	std	Y+2, r24	; 0x02
    3ace:	0f c0       	rjmp	.+30     	; 0x3aee <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ad0:	69 89       	ldd	r22, Y+17	; 0x11
    3ad2:	7a 89       	ldd	r23, Y+18	; 0x12
    3ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	88 8b       	std	Y+16, r24	; 0x10
    3ae2:	88 89       	ldd	r24, Y+16	; 0x10
    3ae4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	8a 95       	dec	r24
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_displayCharacter+0xb6e>
    3aec:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    3aee:	cf 57       	subi	r28, 0x7F	; 127
    3af0:	df 4f       	sbci	r29, 0xFF	; 255
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	cf 91       	pop	r28
    3afe:	df 91       	pop	r29
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	08 95       	ret

00003b06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <LCD_displayString+0x6>
    3b0c:	0f 92       	push	r0
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	9b 83       	std	Y+3, r25	; 0x03
    3b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3b16:	19 82       	std	Y+1, r1	; 0x01
    3b18:	0e c0       	rjmp	.+28     	; 0x3b36 <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	28 2f       	mov	r18, r24
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	9b 81       	ldd	r25, Y+3	; 0x03
    3b24:	fc 01       	movw	r30, r24
    3b26:	e2 0f       	add	r30, r18
    3b28:	f3 1f       	adc	r31, r19
    3b2a:	80 81       	ld	r24, Z
    3b2c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	8f 5f       	subi	r24, 0xFF	; 255
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	28 2f       	mov	r18, r24
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b40:	fc 01       	movw	r30, r24
    3b42:	e2 0f       	add	r30, r18
    3b44:	f3 1f       	adc	r31, r19
    3b46:	80 81       	ld	r24, Z
    3b48:	88 23       	and	r24, r24
    3b4a:	39 f7       	brne	.-50     	; 0x3b1a <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	08 95       	ret

00003b58 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	62 97       	sbiw	r28, 0x12	; 18
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	9a 8b       	std	Y+18, r25	; 0x12
    3b6e:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    3b70:	89 89       	ldd	r24, Y+17	; 0x11
    3b72:	9a 89       	ldd	r25, Y+18	; 0x12
    3b74:	9e 01       	movw	r18, r28
    3b76:	2f 5f       	subi	r18, 0xFF	; 255
    3b78:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7a:	b9 01       	movw	r22, r18
    3b7c:	4a e0       	ldi	r20, 0x0A	; 10
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <itoa>

   LCD_displayString(arr);
    3b84:	ce 01       	movw	r24, r28
    3b86:	01 96       	adiw	r24, 0x01	; 1
    3b88:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
}
    3b8c:	62 96       	adiw	r28, 0x12	; 18
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	cf 91       	pop	r28
    3b9a:	df 91       	pop	r29
    3b9c:	08 95       	ret

00003b9e <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    3b9e:	df 93       	push	r29
    3ba0:	cf 93       	push	r28
    3ba2:	00 d0       	rcall	.+0      	; 0x3ba4 <LCD_moveCursor+0x6>
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <LCD_moveCursor+0x8>
    3ba6:	0f 92       	push	r0
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	8a 83       	std	Y+2, r24	; 0x02
    3bae:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	3d 83       	std	Y+5, r19	; 0x05
    3bb8:	2c 83       	std	Y+4, r18	; 0x04
    3bba:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bbe:	81 30       	cpi	r24, 0x01	; 1
    3bc0:	91 05       	cpc	r25, r1
    3bc2:	c1 f0       	breq	.+48     	; 0x3bf4 <LCD_moveCursor+0x56>
    3bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    3bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    3bc8:	22 30       	cpi	r18, 0x02	; 2
    3bca:	31 05       	cpc	r19, r1
    3bcc:	2c f4       	brge	.+10     	; 0x3bd8 <LCD_moveCursor+0x3a>
    3bce:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	61 f0       	breq	.+24     	; 0x3bee <LCD_moveCursor+0x50>
    3bd6:	19 c0       	rjmp	.+50     	; 0x3c0a <LCD_moveCursor+0x6c>
    3bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    3bda:	3d 81       	ldd	r19, Y+5	; 0x05
    3bdc:	22 30       	cpi	r18, 0x02	; 2
    3bde:	31 05       	cpc	r19, r1
    3be0:	69 f0       	breq	.+26     	; 0x3bfc <LCD_moveCursor+0x5e>
    3be2:	8c 81       	ldd	r24, Y+4	; 0x04
    3be4:	9d 81       	ldd	r25, Y+5	; 0x05
    3be6:	83 30       	cpi	r24, 0x03	; 3
    3be8:	91 05       	cpc	r25, r1
    3bea:	61 f0       	breq	.+24     	; 0x3c04 <LCD_moveCursor+0x66>
    3bec:	0e c0       	rjmp	.+28     	; 0x3c0a <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	0b c0       	rjmp	.+22     	; 0x3c0a <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    3bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf6:	80 5c       	subi	r24, 0xC0	; 192
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	07 c0       	rjmp	.+14     	; 0x3c0a <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	80 5f       	subi	r24, 0xF0	; 240
    3c00:	89 83       	std	Y+1, r24	; 0x01
    3c02:	03 c0       	rjmp	.+6      	; 0x3c0a <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    3c04:	8b 81       	ldd	r24, Y+3	; 0x03
    3c06:	80 5c       	subi	r24, 0xC0	; 192
    3c08:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	80 68       	ori	r24, 0x80	; 128
    3c0e:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
}
    3c12:	0f 90       	pop	r0
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <LCD_displayStringRowColumn+0x6>
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <LCD_displayStringRowColumn+0x8>
    3c2a:	cd b7       	in	r28, 0x3d	; 61
    3c2c:	de b7       	in	r29, 0x3e	; 62
    3c2e:	89 83       	std	Y+1, r24	; 0x01
    3c30:	6a 83       	std	Y+2, r22	; 0x02
    3c32:	5c 83       	std	Y+4, r21	; 0x04
    3c34:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	6a 81       	ldd	r22, Y+2	; 0x02
    3c3a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c40:	9c 81       	ldd	r25, Y+4	; 0x04
    3c42:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <LCD_displayString>
}
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_sendCommand>
}
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <main>:
#include"app.h"
int main(){
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62

	APP_voidInit();
    3c70:	0e 94 47 06 	call	0xc8e	; 0xc8e <APP_voidInit>
	APP_voidWelcomeScreen();
    3c74:	0e 94 54 06 	call	0xca8	; 0xca8 <APP_voidWelcomeScreen>
    3c78:	ff cf       	rjmp	.-2      	; 0x3c78 <main+0x10>

00003c7a <RED_LED_init>:
/*
 * Description :
 * A function to initialize the RED_LED
 */
void RED_LED_init(void)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
	/*Make the REDLED pin output pin*/
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	41 e0       	ldi	r20, 0x01	; 1
    3c88:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_setupPinDirection>

	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <RED_LED_on>:
/*
 * Description :
 * A function to turn on the RED_LED
 */
void RED_LED_on(void)
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	41 e0       	ldi	r20, 0x01	; 1
    3caa:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <RED_LED_off>:
/*
 * Description :
 * A function to turn off theRED_LED
 */
void RED_LED_off(void)
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <__prologue_saves__>:
    3ccc:	2f 92       	push	r2
    3cce:	3f 92       	push	r3
    3cd0:	4f 92       	push	r4
    3cd2:	5f 92       	push	r5
    3cd4:	6f 92       	push	r6
    3cd6:	7f 92       	push	r7
    3cd8:	8f 92       	push	r8
    3cda:	9f 92       	push	r9
    3cdc:	af 92       	push	r10
    3cde:	bf 92       	push	r11
    3ce0:	cf 92       	push	r12
    3ce2:	df 92       	push	r13
    3ce4:	ef 92       	push	r14
    3ce6:	ff 92       	push	r15
    3ce8:	0f 93       	push	r16
    3cea:	1f 93       	push	r17
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	ca 1b       	sub	r28, r26
    3cf6:	db 0b       	sbc	r29, r27
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	09 94       	ijmp

00003d04 <__epilogue_restores__>:
    3d04:	2a 88       	ldd	r2, Y+18	; 0x12
    3d06:	39 88       	ldd	r3, Y+17	; 0x11
    3d08:	48 88       	ldd	r4, Y+16	; 0x10
    3d0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d16:	b9 84       	ldd	r11, Y+9	; 0x09
    3d18:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1a:	df 80       	ldd	r13, Y+7	; 0x07
    3d1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3d1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d20:	0c 81       	ldd	r16, Y+4	; 0x04
    3d22:	1b 81       	ldd	r17, Y+3	; 0x03
    3d24:	aa 81       	ldd	r26, Y+2	; 0x02
    3d26:	b9 81       	ldd	r27, Y+1	; 0x01
    3d28:	ce 0f       	add	r28, r30
    3d2a:	d1 1d       	adc	r29, r1
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	ed 01       	movw	r28, r26
    3d38:	08 95       	ret

00003d3a <itoa>:
    3d3a:	fb 01       	movw	r30, r22
    3d3c:	9f 01       	movw	r18, r30
    3d3e:	e8 94       	clt
    3d40:	42 30       	cpi	r20, 0x02	; 2
    3d42:	c4 f0       	brlt	.+48     	; 0x3d74 <itoa+0x3a>
    3d44:	45 32       	cpi	r20, 0x25	; 37
    3d46:	b4 f4       	brge	.+44     	; 0x3d74 <itoa+0x3a>
    3d48:	4a 30       	cpi	r20, 0x0A	; 10
    3d4a:	29 f4       	brne	.+10     	; 0x3d56 <itoa+0x1c>
    3d4c:	97 fb       	bst	r25, 7
    3d4e:	1e f4       	brtc	.+6      	; 0x3d56 <itoa+0x1c>
    3d50:	90 95       	com	r25
    3d52:	81 95       	neg	r24
    3d54:	9f 4f       	sbci	r25, 0xFF	; 255
    3d56:	64 2f       	mov	r22, r20
    3d58:	77 27       	eor	r23, r23
    3d5a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__udivmodhi4>
    3d5e:	80 5d       	subi	r24, 0xD0	; 208
    3d60:	8a 33       	cpi	r24, 0x3A	; 58
    3d62:	0c f0       	brlt	.+2      	; 0x3d66 <itoa+0x2c>
    3d64:	89 5d       	subi	r24, 0xD9	; 217
    3d66:	81 93       	st	Z+, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	a1 f7       	brne	.-24     	; 0x3d56 <itoa+0x1c>
    3d6e:	16 f4       	brtc	.+4      	; 0x3d74 <itoa+0x3a>
    3d70:	5d e2       	ldi	r21, 0x2D	; 45
    3d72:	51 93       	st	Z+, r21
    3d74:	10 82       	st	Z, r1
    3d76:	c9 01       	movw	r24, r18
    3d78:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <strrev>

00003d7c <strrev>:
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	fc 01       	movw	r30, r24
    3d80:	67 2f       	mov	r22, r23
    3d82:	71 91       	ld	r23, Z+
    3d84:	77 23       	and	r23, r23
    3d86:	e1 f7       	brne	.-8      	; 0x3d80 <strrev+0x4>
    3d88:	32 97       	sbiw	r30, 0x02	; 2
    3d8a:	04 c0       	rjmp	.+8      	; 0x3d94 <strrev+0x18>
    3d8c:	7c 91       	ld	r23, X
    3d8e:	6d 93       	st	X+, r22
    3d90:	70 83       	st	Z, r23
    3d92:	62 91       	ld	r22, -Z
    3d94:	ae 17       	cp	r26, r30
    3d96:	bf 07       	cpc	r27, r31
    3d98:	c8 f3       	brcs	.-14     	; 0x3d8c <strrev+0x10>
    3d9a:	08 95       	ret

00003d9c <__udivmodhi4>:
    3d9c:	aa 1b       	sub	r26, r26
    3d9e:	bb 1b       	sub	r27, r27
    3da0:	51 e1       	ldi	r21, 0x11	; 17
    3da2:	07 c0       	rjmp	.+14     	; 0x3db2 <__udivmodhi4_ep>

00003da4 <__udivmodhi4_loop>:
    3da4:	aa 1f       	adc	r26, r26
    3da6:	bb 1f       	adc	r27, r27
    3da8:	a6 17       	cp	r26, r22
    3daa:	b7 07       	cpc	r27, r23
    3dac:	10 f0       	brcs	.+4      	; 0x3db2 <__udivmodhi4_ep>
    3dae:	a6 1b       	sub	r26, r22
    3db0:	b7 0b       	sbc	r27, r23

00003db2 <__udivmodhi4_ep>:
    3db2:	88 1f       	adc	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	5a 95       	dec	r21
    3db8:	a9 f7       	brne	.-22     	; 0x3da4 <__udivmodhi4_loop>
    3dba:	80 95       	com	r24
    3dbc:	90 95       	com	r25
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	08 95       	ret

00003dc4 <_exit>:
    3dc4:	f8 94       	cli

00003dc6 <__stop_program>:
    3dc6:	ff cf       	rjmp	.-2      	; 0x3dc6 <__stop_program>
